📂 KODTRÄD
==========
├── ..
│   ├── ..
│   │   ├── ..
│   │   │   ├── ..
│   │   │   │   ├── Library
│   │   │   │   │   ├── LaunchAgents
│   │   │   │   │   │   ├── com.macspot.sync.plist
│   │   │   │   ├── macspot-safe
│   │   │   │   │   ├── macspot_internal
│   │   │   │   │   │   ├── macspot_launch_proxy.py
├── healthcheck_sync.py
├── sync.py
├── sync_all.py
├── sync_from_cloud.py
├── sync_plist.xml
├── sync_static_tables.py
├── sync_to_cloud.py
==========

====================
📄 Fil: sync_from_cloud.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-02 08:11:09
📏 Antal rader: 146
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 2 – ['import psycopg2', 'import json']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 20
🧪 TODO/FIXME: 0
====================
START: sync_from_cloud.py
import psycopg2
import json
from config import LOCAL_DB_CONFIG, REMOTE_DB_CONFIG

def connect_db(config):
    return psycopg2.connect(**config)

def safe_json_load(data, default={}):
    try:
        return json.loads(data) if isinstance(data, str) else data
    except Exception:
        return default

def metadata_equal(meta1, meta2):
    m1 = safe_json_load(meta1)
    m2 = safe_json_load(meta2)
    return m1 == m2

def apply_change(cur, table, operation, payload):
    try:
        if operation == "INSERT":
            cols = ", ".join(payload.keys())
            placeholders = ", ".join(["%s"] * len(payload))
            sql = f"INSERT INTO {table} ({cols}) VALUES ({placeholders}) ON CONFLICT (id) DO NOTHING"
            cur.execute(sql, [json.dumps(v) if isinstance(v, dict) else v for v in payload.values()])

        elif operation == "UPDATE":
            if table == "contact" and "metadata" in payload:
                local_meta = payload["metadata"]
                cur.execute("SELECT metadata FROM contact WHERE id = %s", (payload["id"],))
                row = cur.fetchone()
                if row and metadata_equal(row[0], local_meta):
                    print(f"♻️ Ingen skillnad i metadata för {payload['id']}, hoppar UPDATE.")
                    return

            sets = ", ".join([f"{col} = %s" for col in payload if col != "id"])
            values = [json.dumps(payload[col]) if isinstance(payload[col], dict) else payload[col]
                      for col in payload if col != "id"]
            values.append(payload["id"])
            sql = f"UPDATE {table} SET {sets} WHERE id = %s"
            cur.execute(sql, values)

            # Verifiera resultat (endast för kontakt)
            if table == "contact":
                cur.execute("SELECT metadata, updated_at FROM contact WHERE id = %s", [payload["id"]])
                updated_row = cur.fetchone()
                if updated_row:
                    try:
                        metadata = safe_json_load(updated_row[0])
                        address = metadata.get("address") or metadata.get("company") or "(ingen adress)"
                    except Exception:
                        address = "(kunde inte tolkas)"
                    print(f"🧾 Efter UPDATE: {payload['id']} → {address} @ {updated_row[1]}")
                else:
                    print(f"⚠️ UPDATE-verifiering misslyckades: Inget resultat för {payload['id']}")

        elif operation == "DELETE":
            cur.execute(f"DELETE FROM {table} WHERE id = %s", [payload["id"]])
            print(f"🗑️ Raderade post {payload['id']} från {table}")
            print(f"🗑️ Raderade post {payload['id']} från {table}")

    except Exception as e:
        print(f"❌ Fel i apply_change för {table} ({operation}): {e}")
        raise

def sync():
    remote_conn = connect_db(REMOTE_DB_CONFIG)
    remote_cur = remote_conn.cursor()

    local_conn = connect_db(LOCAL_DB_CONFIG)
    local_cur = local_conn.cursor()

    try:
        remote_cur.execute("""
            SELECT id, table_name, record_id, operation, payload
            FROM (
                SELECT *, ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at ASC) AS rn
                FROM pending_changes
                WHERE direction = 'out' AND processed = false
                  AND table_name IN ('contact', 'bookings')
            ) sub
            WHERE rn = 1
            ORDER BY created_at ASC, id
        """)
        rows = remote_cur.fetchall()

        remote_cur.execute("""
            DELETE FROM pending_changes
            WHERE id NOT IN (
                SELECT id FROM (
                    SELECT id, ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at ASC) AS rn
                    FROM pending_changes
                    WHERE direction = 'out' AND processed = false
                ) sub
                WHERE rn = 1
            ) AND direction = 'out' AND processed = false AND operation = 'UPDATE';
        """)

        count = 0
        for row in rows:
            change_id, table, record_id, operation, payload_json = row
            try:
                payload = safe_json_load(payload_json)
                if not isinstance(payload.get("id"), str) or "your-generated-id" in payload.get("id"):
                    continue

                apply_change(local_cur, table, operation, payload)

                if table == "bookings" and operation == "INSERT":
                    local_cur.execute("""
                        UPDATE pending_changes
                        SET booking_id = %s
                        WHERE record_id = %s AND table_name = 'bookings' AND booking_id IS NULL
                    """, (record_id, record_id))

                # Logga kontaktimport
                if table == "contact":
                    email = payload.get("booking_email", "(okänd e-post)")
                    meta = safe_json_load(payload.get("metadata", {}))
                    address = meta.get("address", "(okänd adress)")
                    print(f"📥 Importerad kontakt: {email} → {address}")

                local_cur.execute("""
                    INSERT INTO event_log (id, source, event_type, payload, received_at)
                    VALUES (gen_random_uuid(), %s, %s, %s, now())
                """, ('sync', f"{operation.lower()}_{table}", json.dumps(payload)))

                remote_cur.execute("UPDATE pending_changes SET processed = true WHERE id = %s", [change_id])
                remote_conn.commit()
                local_conn.commit()
                count += 1

            except Exception as e:
                print(f"❌ Fel vid synk för {table} (id={change_id}): {e}")
                local_conn.rollback()
                remote_conn.rollback()
                continue

    finally:
        local_cur.close()
        remote_cur.close()
        local_conn.close()
        remote_conn.close()

if __name__ == "__main__":
    sync()
END: sync_from_cloud.py

====================
📄 Fil: sync_to_cloud.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-01 10:37:14
📏 Antal rader: 222
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 3 – ['import psycopg2', 'import json', 'import traceback']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 38
🧪 TODO/FIXME: 0
====================
START: sync_to_cloud.py
import psycopg2
import json
from datetime import datetime, timezone
from config import LOCAL_DB_CONFIG, REMOTE_DB_CONFIG

def safe_json_load(data, default={}):
    try:
        return json.loads(data) if isinstance(data, str) else data
    except Exception:
        return default

def metadata_equal(meta1, meta2):
    m1 = safe_json_load(meta1)
    m2 = safe_json_load(meta2)
    return m1 == m2

def connect_db(config):
    return psycopg2.connect(**config)

def fetch_pending_changes(conn):
    with conn.cursor() as cur:
        cur.execute("""
            SELECT id, table_name, record_id, operation, payload
            FROM (
                SELECT *, ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at ASC) AS rn
                FROM pending_changes
                WHERE direction = 'out' AND processed = false
                  AND table_name IN ('contact', 'bookings')
            ) sub
            WHERE rn = 1
            ORDER BY created_at ASC, id
        """)
        rows = cur.fetchall()

        # Rensa äldre UPDATE-poster med samma record_id
        cur.execute("""
            DELETE FROM pending_changes
            WHERE id NOT IN (
                SELECT id FROM (
                    SELECT id, ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at ASC) AS rn
                    FROM pending_changes
                    WHERE direction = 'out' AND processed = false
                ) sub
                WHERE rn = 1
            ) AND direction = 'out' AND processed = false AND operation = 'UPDATE';
        """)
        return rows

def mark_as_processed(conn, change_id):
    with conn.cursor() as cur:
        cur.execute("UPDATE pending_changes SET processed = true WHERE id = %s", (change_id,))
        conn.commit()

#
# 📝 SYNC-BETEENDE: Hantering av metadata
#
# Viktigt att förstå skillnaden:
#
# 1. Ändring av värde:
#    - Exempel: "postal_code": "111 11" → "115 32"
#    - Hanteras som en vanlig UPDATE (om updated_at är nyare)
#
# 2. Ändring av nyckel (etikett):
#    - Exempel: "postal_number" → "postal_code"
#    - Molnet kommer *inte* ta bort "postal_number" utan force_resync
#    - Lägg till `"force_resync": true` i metadata för att tvinga full överskrivning
#
# Detta minskar risken att data i molnet raderas av misstag.

def apply_change(conn, change, local_conn):
    table_name, record_id, operation, payload = change[1], change[2], change[3], change[4]
    with conn.cursor() as cur:
        data = safe_json_load(payload)

        # Skip contact records with metadata.origin != 'klrab.se'
        if table_name == 'contact' and 'metadata' in data:
            meta = safe_json_load(data['metadata'])
            if meta.get('origin') != 'klrab.se':
                print(f"⚠️ Skickas ej: origin != klrab.se – {data.get('booking_email')}")
                mark_as_processed(local_conn, change[0])
                return

        # Ensure all values are serializable to SQL
        for k, v in data.items():
            if isinstance(v, dict):
                data[k] = json.dumps(v)

        if 'updated_at' in data:
            if isinstance(data['updated_at'], str):
                # Parse and convert to UTC if it's a string
                try:
                    dt = datetime.fromisoformat(data['updated_at'])
                    data['updated_at'] = dt.astimezone(timezone.utc).isoformat()
                except Exception as e:
                    print(f"⚠️ Kunde inte tolka updated_at: {data['updated_at']} ({e})")
            elif isinstance(data['updated_at'], datetime):
                data['updated_at'] = data['updated_at'].astimezone(timezone.utc).isoformat()

        if operation == 'INSERT':
            columns = ', '.join(data.keys())
            placeholders = ', '.join(['%s'] * len(data))
            values = list(data.values())
            cur.execute(
                f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders}) "
                f"ON CONFLICT (id) DO UPDATE SET "
                f"{', '.join([f'{k} = EXCLUDED.{k}' for k in data.keys() if k != 'id'])}",
                values
            )
            if table_name == 'bookings':
                with local_conn.cursor() as local_cur:
                    local_cur.execute(
                        """
                        UPDATE pending_changes
                        SET booking_id = %s
                        WHERE record_id = %s AND table_name = 'bookings' AND booking_id IS NULL
                        """,
                        (record_id, record_id)
                    )
                    local_conn.commit()

        if data.get("force_resync") is True:
            print(f"🔁 Force resync aktiv – uppdaterar {table_name} {record_id}")

        if operation == 'UPDATE':
            # Merge metadata with existing remote value and ensure JSON string (only for UPDATE)
            if 'metadata' in data and table_name == 'contact':
                cur.execute(f"SELECT metadata FROM {table_name} WHERE id = %s", (record_id,))
                row = cur.fetchone()
                if row and row[0]:
                    existing_metadata = safe_json_load(row[0])
                else:
                    existing_metadata = {}

                incoming_metadata = safe_json_load(data['metadata'])
                if metadata_equal(existing_metadata, incoming_metadata):
                    mark_as_processed(local_conn, change[0])
                    return
                existing_metadata.update(incoming_metadata)
                changed_keys = [k for k in incoming_metadata if existing_metadata.get(k) != incoming_metadata[k]]
                if not changed_keys:
                    mark_as_processed(local_conn, change[0])
                    return
                data['metadata'] = json.dumps(existing_metadata)

            # Förbättrad hantering av tidsjämförelse för updated_at
            if 'updated_at' in data and not data.get("force_resync"):
                try:
                    # Säkerställ att local_ts är datetime i UTC
                    local_ts = data['updated_at']
                    if isinstance(local_ts, str):
                        local_ts = datetime.fromisoformat(local_ts)
                    if local_ts.tzinfo is None:
                        local_ts = local_ts.replace(tzinfo=timezone.utc)
                    else:
                        local_ts = local_ts.astimezone(timezone.utc)

                    cur.execute(f"SELECT updated_at FROM {table_name} WHERE id = %s", (record_id,))
                    row = cur.fetchone()
                    if row and row[0] and isinstance(row[0], datetime):
                        remote_ts = row[0]
                        if remote_ts.tzinfo is None:
                            remote_ts = remote_ts.replace(tzinfo=timezone.utc)
                        else:
                            remote_ts = remote_ts.astimezone(timezone.utc)

                        if local_ts <= remote_ts:
                            mark_as_processed(local_conn, change[0])
                            return
                except Exception:
                    pass

            if table_name == "contact" and "metadata" in data:
                local_meta = safe_json_load(data["metadata"])
                cur.execute("SELECT metadata FROM contact WHERE id = %s", (data["id"],))
                row = cur.fetchone()
                if row:
                    remote_meta = safe_json_load(row[0])
                    if remote_meta == local_meta:
                        mark_as_processed(local_conn, change[0])
                        return

            columns = ', '.join(data.keys())
            placeholders = ', '.join(['%s'] * len(data))
            values = list(data.values())
            update_keys = [k for k in data.keys() if k != 'id']
            update_set = ', '.join([f"{k} = %s" for k in update_keys])
            update_values = [data[k] for k in update_keys]
            update_values.append(record_id)
            cur.execute(
                f"UPDATE {table_name} SET {update_set} WHERE id = %s",
                update_values
            )
            print(f"✅ UPDATE körd för {table_name} {record_id}")
            cur.execute("SELECT metadata, updated_at FROM contact WHERE id = %s", [payload["id"]])
            updated_row = cur.fetchone()
        elif operation == 'DELETE':
            cur.execute(f"DELETE FROM {table_name} WHERE id = %s", (record_id,))
            print(f"🗑️ Raderade post {record_id} från {table_name}")
            print(f"🗑️ Raderade post {record_id} från {table_name}")
        conn.commit()
        mark_as_processed(local_conn, change[0])

def sync():
    import traceback
    local_conn = connect_db(LOCAL_DB_CONFIG)
    remote_conn = connect_db(REMOTE_DB_CONFIG)

    changes = fetch_pending_changes(local_conn)
    count = 0
    for change in changes:
        try:
            apply_change(remote_conn, change, local_conn)
            count += 1
        except Exception as e:
            print(f"❌ Misslyckades att applicera ändring på {change[1]} (id={change[2]}): {e}")
            traceback.print_exc()
    
    local_conn.close()
    remote_conn.close()

if __name__ == "__main__":
    sync()
END: sync_to_cloud.py

====================
📄 Fil: sync_static_tables.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-04-24 17:01:52
📏 Antal rader: 61
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 2 – ['import psycopg2', 'import json']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 6
🧪 TODO/FIXME: 0
====================
START: sync_static_tables.py
from config import LOCAL_DB_CONFIG, REMOTE_DB_CONFIG
import psycopg2
import json
from datetime import datetime


TABLES = ["translation", "booking_settings"]


def connect_db(config):
    return psycopg2.connect(**config)


def fetch_all_from_local(conn, table):
    with conn.cursor() as cur:
        cur.execute(f"SELECT * FROM {table}")
        colnames = [desc[0] for desc in cur.description]
        rows = cur.fetchall()
        return colnames, rows


def clear_remote_table(conn, table):
    with conn.cursor() as cur:
        cur.execute(f"DELETE FROM {table}")
        conn.commit()


def insert_to_remote(conn, table, columns, rows):
    with conn.cursor() as cur:
        placeholders = ', '.join(['%s'] * len(columns))
        colnames = ', '.join(columns)
        for row in rows:
            # Hantera jsonb-värden som json-strängar
            formatted_row = []
            for i, col in enumerate(columns):
                value = row[i]
                if table == 'booking_settings' and col == 'value':
                    formatted_row.append(json.dumps(value))
                else:
                    formatted_row.append(value)
            cur.execute(f"INSERT INTO {table} ({colnames}) VALUES ({placeholders})", formatted_row)
        conn.commit()


def sync_static_tables():
    local_conn = connect_db(LOCAL_DB_CONFIG)
    remote_conn = connect_db(REMOTE_DB_CONFIG)

    for table in TABLES:
        print(f"\n⏳ Synkar tabell: {table}...")
        columns, rows = fetch_all_from_local(local_conn, table)
        clear_remote_table(remote_conn, table)
        insert_to_remote(remote_conn, table, columns, rows)
        print(f"✅ Klar med tabell: {table} ({len(rows)} rader)")

    local_conn.close()
    remote_conn.close()


if __name__ == "__main__":
    sync_static_tables()

END: sync_static_tables.py

====================
📄 Fil: sync.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-05-31 19:07:46
📏 Antal rader: 90
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 2 – ['import psycopg2', 'import json']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 9
🧪 TODO/FIXME: 0
====================
START: sync.py
import psycopg2
import json
from datetime import datetime
from config import LOCAL_DB_CONFIG

def safe_json_load(data, default={}):
    try:
        return json.loads(data) if isinstance(data, str) else data
    except Exception:
        return default

def metadata_equal(meta1, meta2):
    m1 = safe_json_load(meta1)
    m2 = safe_json_load(meta2)
    return m1 == m2

# Anslutning till lokal PostgreSQL
conn = psycopg2.connect(**LOCAL_DB_CONFIG)
cursor = conn.cursor()

# Rensa äldre UPDATE-rader (endast senaste behövs per record_id)
cursor.execute("""
    DELETE FROM pending_changes pc
    WHERE operation = 'UPDATE'
      AND processed = false
      AND direction = 'out'
      AND id NOT IN (
        SELECT id FROM (
          SELECT id,
                 ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at DESC) AS rn
          FROM pending_changes
          WHERE operation = 'UPDATE'
            AND processed = false
            AND direction = 'out'
        ) sub
        WHERE rn = 1
      );
""")

# Hämta EN ändring per kontakt (record_id) – endast senaste per kontakt exporteras med hjälp av ROW_NUMBER()
cursor.execute("""
    SELECT id, table_name, record_id, operation, payload, created_at
    FROM (
        SELECT *, ROW_NUMBER() OVER (PARTITION BY record_id ORDER BY created_at DESC) as rn
        FROM pending_changes
        WHERE processed = false AND direction = 'out'
    ) sub
    WHERE rn = 1
""")

rows = cursor.fetchall()

# Filtrera bort poster där metadata är identisk med befintlig kontakt
filtered_rows = []
for row in rows:
    change_id, table, record_id, operation, payload, created_at = row
    data = json.loads(payload) if isinstance(payload, str) else payload
    if table == "contact" and operation == "UPDATE":
        try:
            cursor.execute("SELECT metadata FROM contact WHERE id = %s", (record_id,))
            result = cursor.fetchone()
            if result:
                incoming_metadata = data.get("metadata")
                if metadata_equal(result[0], incoming_metadata):
                    continue
        except Exception as e:
            print(f"⚠️ Kunde inte jämföra metadata för {record_id}: {e}")
    filtered_rows.append(row)
rows = filtered_rows

# Skapa exportformat
export = []
for row in rows:
    change_id, table, record_id, operation, payload, created_at = row
    export.append({
        "change_id": str(change_id),
        "table": table,
        "operation": operation,
        "data": payload
    })

# Spara till JSON-fil med tidsstämpel
if export:
    first_type = export[0]["table"] if export else "unknown"
    filename = f"sync_outbox/{datetime.now().strftime('%Y%m%d_%H%M%S')}_{first_type}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(export, f, indent=2, ensure_ascii=False)

cursor.close()
conn.close()

END: sync.py

====================
📄 Fil: sync_all.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-02 15:21:34
📏 Antal rader: 195
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 7 – ['import os', 'import subprocess', 'import sys', 'import psycopg2', 'import json', 'import socket', 'import traceback']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 23
🧪 TODO/FIXME: 0
====================
START: sync_all.py
BASE = "/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot-api"


import os
import subprocess
from datetime import datetime, timezone
import sys
import psycopg2
import json

with open("/tmp/launchd_debug.txt", "a") as f:
    f.write("[sync_all.py] Körning initierad\n")

with open("/tmp/env_debug.txt", "w") as f:
    f.write("START\n")
    f.write(str(dict(os.environ)))

# Delad json- och metadata-funktionalitet som används i flera synkmoduler
def safe_json_load(data, default={}):
    try:
        return json.loads(data) if isinstance(data, str) else data
    except Exception:
        return default

def metadata_equal(meta1, meta2):
    m1 = safe_json_load(meta1)
    m2 = safe_json_load(meta2)
    return m1 == m2

log_dir = "/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot"
log_out = os.path.join(log_dir, "macspot_sync.log")
log_err = os.path.join(log_dir, "macspot_sync_error.log")

# Se till att loggfilerna existerar
for path in [log_out, log_err]:
    if not os.path.exists(path):
        with open(path, 'w'):
            pass

# Skriv ut manuell/automatisk körningsinfo till loggen
is_manual = os.environ.get("LAUNCHD_RUN") != "true"
log_mode = "MANUELL" if is_manual else "AUTOMATISK (launchd)"
with open("/tmp/env_debug.txt", "a") as f:
    f.write(f"LAUNCHD_RUN: {os.environ.get('LAUNCHD_RUN')}\n")
# Debug environment variables to file
with open("/tmp/env_debug.txt", "w") as f:
    f.write(str(dict(os.environ)))
out = open(log_out, 'a')
err = open(log_err, 'a')
sys.stdout = out
sys.stderr = err
print(f"🚀 Körläge: {log_mode} – {datetime.now(timezone.utc).isoformat()}")

def run_script(name, script_path):
    subprocess.run(["/Users/danielkallberg/Documents/KLR_AI/venv/bin/python", f"{BASE}/{script_path}"], check=True)

try:
    start_time = datetime.now(timezone.utc)
    def is_database_online(host, port):
        import socket
        try:
            socket.create_connection((host, port), timeout=2)
            return True
        except:
            return False

    def run_healthcheck():
        try:
            subprocess.run(
                ["/Users/danielkallberg/Documents/KLR_AI/venv/bin/python", f"{BASE}/healthcheck_sync.py"],
                check=True
            )
        except Exception as e:
            print(f"❌ Healthcheck misslyckades: {e}")

    # Kontrollera att båda databaser är online innan sync startar
    if not is_database_online("localhost", 5433):
        print("❌ Lokal databas är inte tillgänglig (localhost:5433)")
        exit(1)

    if not is_database_online("macspotpg.postgres.database.azure.com", 5432):
        print("❌ Azure-databasen är inte tillgänglig (macspotpg.postgres.database.azure.com:5432)")
        exit(1)

    print(f"📌 Körning initierad: {datetime.now(timezone.utc).isoformat()}")

    print("🧪 Kör healthcheck_sync.py...")
    run_healthcheck()

    print(f"\n🔄 [{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}] Startar fullständig synk...")

    scripts_part1 = [
        ("🟡 Kör sync.py...", "sync.py"),
        ("🟢 Kör sync_to_cloud.py...", "sync_to_cloud.py")
    ]

    for msg, script in scripts_part1:
        run_script(msg, script)

    scripts_part2 = [
        ("🔵 Kör sync_from_cloud.py...", "sync_from_cloud.py")
    ]

    for msg, script in scripts_part2:
        run_script(msg, script)

    today_prefix = datetime.now(timezone.utc).strftime('%Y%m%d')
    outbox_dir = os.path.join(BASE, 'sync_outbox')
    files = [f for f in os.listdir(outbox_dir) if f.startswith(today_prefix)]
    files_with_type = [f for f in files if len(f.split("_")) >= 3]
    num_changes = len(files_with_type)

    if num_changes == 0:
        print("ℹ️ Ingen förändring hittades att synka.")
        print("📭 Inga fler ändringar kvar i pending_changes.")
    else:
        print(f"📤 Totalt {num_changes} ändring(ar) skickades till molnet:")
        files = [f for f in sorted(os.listdir(outbox_dir)) if f.startswith(today_prefix)]
        summary = {}
        for f in files:
            parts = f.split("_")
            if len(parts) >= 3:
                typ = parts[2].split(".")[0]
                summary[typ] = summary.get(typ, 0) + 1

        if summary:
            print("🧾 Sammanfattning per typ:")
            for typ, count in summary.items():
                print(f"   • {typ}: {count} st")

        # --- Kontrollera och skriv ut äldre JSON-filer i sync_outbox ---
        old_files = [f for f in os.listdir(outbox_dir) if not f.startswith(today_prefix)]
        if old_files:
            print("📂 Äldre JSON-filer som ligger kvar i sync_outbox:")
            for f in old_files:
                print(f"   • {f}")

        print("📊 Kontroll av återstående ändringar i pending_changes...")

        # Lokalt
        local = psycopg2.connect(
            dbname="macspot",
            user="postgres",
            host="localhost",
            port=5433
        )
        cur_local = local.cursor()
        cur_local.execute("""
            SELECT COUNT(*) FROM pending_changes
            WHERE direction = 'out' AND processed = false
        """)
        out_local = cur_local.fetchone()[0]
        cur_local.execute("""
            SELECT COUNT(*) FROM pending_changes
            WHERE direction = 'out' AND processed = false
            GROUP BY record_id
        """)
        print(f"   • Lokalt → molnet: {out_local} ändring(ar) kvar över {cur_local.rowcount} kontakt(er).")
        cur_local.close()
        local.close()

        # Molnet
        cloud = psycopg2.connect(
            dbname="postgres",
            user="daniel",
            host="macspotpg.postgres.database.azure.com",
            port=5432
        )
        cur_cloud = cloud.cursor()
        cur_cloud.execute("""
            SELECT COUNT(*) FROM pending_changes
            WHERE direction = 'out' AND processed = false
        """)
        out_cloud = cur_cloud.fetchone()[0]
        cur_cloud.execute("""
            SELECT COUNT(*) FROM pending_changes
            WHERE direction = 'out' AND processed = false
            GROUP BY record_id
        """)
        cur_cloud.close()
        cloud.close()

    print(f"\n✅ [{datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}] Fullständig synk körd.")

except Exception as e:
    import traceback
    print("❌ Ett oväntat fel inträffade under körningen:")
    print(traceback.format_exc())

finally:
    print(f"🏁 Körning avslutad: {datetime.now(timezone.utc).isoformat()}")
    duration = datetime.now(timezone.utc) - start_time
    print(f"⏱️ Total körtid: {int(duration.total_seconds())} sekunder")
    out.close()
    err.close()
END: sync_all.py

====================
📄 Fil: sync_plist.xml
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 📄 Okänt format
📅 Senast ändrad: 2025-06-02 15:54:23
📏 Antal rader: 33
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 0
🧪 TODO/FIXME: 0
====================
START: sync_plist.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.macspot.sync</string>

  <key>ProgramArguments</key>
  <array>
    <string>/bin/zsh</string>
    <string>-c</string>
    <string>
      export LAUNCHD_RUN=true &&
      /Users/danielkallberg/Documents/KLR_AI/venv/bin/python3 /Users/danielkallberg/macspot-safe/macspot_internal/macspot_launch_proxy.py >> /tmp/launchd_debug.txt 2>&1
    </string>
  </array>

  <key>WorkingDirectory</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot-api</string>

  <key>StartInterval</key>
  <integer>300</integer>

  <key>RunAtLoad</key>
  <true/>

  <key>StandardOutPath</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot_sync.log</string>
  <key>StandardErrorPath</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot_sync_error.log</string>
</dict>
</plist>
END: sync_plist.xml

====================
📄 Fil: ../../../../Library/LaunchAgents/com.macspot.sync.plist
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 📄 Okänt format
📅 Senast ändrad: 2025-06-02 15:54:45
📏 Antal rader: 33
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 0
🧪 TODO/FIXME: 0
====================
START: com.macspot.sync.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.macspot.sync</string>

  <key>ProgramArguments</key>
  <array>
    <string>/bin/zsh</string>
    <string>-c</string>
    <string>
      export LAUNCHD_RUN=true &&
      /Users/danielkallberg/Documents/KLR_AI/venv/bin/python3 /Users/danielkallberg/macspot-safe/macspot_internal/macspot_launch_proxy.py >> /tmp/launchd_debug.txt 2>&1
    </string>
  </array>

  <key>WorkingDirectory</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot-api</string>

  <key>StartInterval</key>
  <integer>300</integer>

  <key>RunAtLoad</key>
  <true/>

  <key>StandardOutPath</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot_sync.log</string>
  <key>StandardErrorPath</key>
  <string>/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot_sync_error.log</string>
</dict>
</plist>
END: com.macspot.sync.plist

====================
📄 Fil: healthcheck_sync.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-01 10:42:26
📏 Antal rader: 56
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 2 – ['import psycopg2', 'import sys']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 4
🧪 TODO/FIXME: 0
====================
START: healthcheck_sync.py
# 📄 Förbättrad version av healthcheck_sync.py

import psycopg2
from config import LOCAL_DB_CONFIG, REMOTE_DB_CONFIG
from datetime import datetime, timezone
import sys

__version__ = "1.0.1"

def get_pending_count(conn, label):
    with conn.cursor() as cur:
        cur.execute("""
            SELECT COUNT(*) FROM pending_changes
            WHERE direction = 'out' AND processed = false
        """)
        count = cur.fetchone()[0]
        print(f"🔍 {label}: {count} osynkade förändringar")
        return count

def check_db_connection(name, config):
    try:
        start = datetime.now(timezone.utc)
        conn = psycopg2.connect(**config)
        latency = (datetime.now(timezone.utc) - start).total_seconds()
        print(f"✅ Anslutning till {name} OK (latens: {latency:.2f} sek)")
        return conn
    except Exception as e:
        print(f"❌ Fel vid anslutning till {name}: {e}")
        return None

def main():
    print(f"\n📋 Healthcheck MacSpot sync v{__version__} – {datetime.now(timezone.utc).isoformat()} UTC\n")
    errors = 0

    local_conn = check_db_connection("Lokal databas", LOCAL_DB_CONFIG)
    if local_conn:
        get_pending_count(local_conn, "Lokal → moln")
        local_conn.close()
    else:
        errors += 1

    remote_conn = check_db_connection("Molndatabas", REMOTE_DB_CONFIG)
    if remote_conn:
        get_pending_count(remote_conn, "Moln → lokal")
        remote_conn.close()
    else:
        errors += 1

    if errors > 0:
        print(f"\n❌ Healthcheck avslutades med {errors} fel.\n")
        sys.exit(1)
    else:
        print(f"\n✅ Healthcheck genomförd utan fel.\n")

if __name__ == "__main__":
    main()
END: healthcheck_sync.py

====================
📄 Fil: ../../../../macspot-safe/macspot_internal/macspot_launch_proxy.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-02 15:52:43
📏 Antal rader: 39
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 3 – ['import os', 'import datetime', 'import subprocess']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 2
🧪 TODO/FIXME: 0
====================
START: macspot_launch_proxy.py
#!/usr/bin/env python3
import os

# Dumpa hela miljön
with open("/tmp/env_dump.txt", "a") as f:
    for key, val in sorted(os.environ.items()):
        f.write(f"{key}={val}\n")

# Logga specifikt värde på LAUNCHD_RUN före eventuell modifiering
with open("/tmp/env_debug.txt", "a") as f:
    f.write(f"[proxy] Före override: LAUNCHD_RUN={os.environ.get('LAUNCHD_RUN')}\n")

# (Valfritt) sätt LAUNCHD_RUN till true – detta överskriver launchd:s värde
os.environ["LAUNCHD_RUN"] = "true"

# Logga nytt värde
with open("/tmp/env_debug.txt", "a") as f:
    f.write(f"[proxy] Efter override: LAUNCHD_RUN={os.environ.get('LAUNCHD_RUN')}\n")

# Sammanfattning i launchd_debug.txt
with open("/tmp/launchd_debug.txt", "a") as f:
    f.write(f"[launch_proxy] LAUNCHD_RUN={os.environ.get('LAUNCHD_RUN')}\n")
import datetime
with open("/tmp/launchd_debug.txt", "a") as f:
    mode = "AUTOMATISK" if os.environ.get("LAUNCHD_RUN") == "true" else "MANUELL"
    f.write(f"[{datetime.datetime.now()}] macspot_launch_proxy.py startad ({mode})\n")
import subprocess
with open("/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot_launchd_proof.log", "a") as f:
    f.write(f"🔄 Körning initierad av launchd: {datetime.datetime.now().isoformat()}\n")
try:
    result = subprocess.run([
        "/Users/danielkallberg/Documents/KLR_AI/venv/bin/python3",
        "/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot-api/sync_all.py"
    ], check=True, capture_output=True, text=True)
    with open("/tmp/launchd_debug.txt", "a") as f:
        f.write(f"✅ sync_all.py kördes OK\n{result.stdout}\n")
except subprocess.CalledProcessError as e:
    with open("/tmp/launchd_debug.txt", "a") as f:
        f.write(f"❌ Felkod: {e.returncode}\nSTDERR:\n{e.stderr}\n")
END: macspot_launch_proxy.py

📁 KONFIGURATIONSFILER (function.json / host.json / package.json / .funcignore)
====================================

📄 .funcignore
   # Exclude dev-only files and folders
   .git
   .vscode
   .env
   *.log
   test/
   tests/
   
   # Explicitly include all required files and folders
   !host.json
   !package.json
   !package-lock.json
   
   !node_modules/
   !node_modules/**
   
   !shared/
   !shared/**
   
   !bookings/
   !bookings/**
   !getavailableslots/
   !getavailableslots/**
   !validate_contact/
   !validate_contact/**
   !meeting_types/
   !meeting_types/**
   !refreshCalendarOrigins/
   !refreshCalendarOrigins/**
   !refreshTravelTimes/
   !refreshTravelTimes/**
   !booking_settings/
   !booking_settings/**
   !test_azurecloud/
   !test_azurecloud/**
   !trackingPixel/
   !trackingPixel/**
📄 booking_settings/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get"],
         "route": "booking_settings"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 bookings/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "bookings"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 getavailableslots/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "getavailableslots"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 host.json
   {
     "version": "2.0",
     "extensionBundle": {
       "id": "Microsoft.Azure.Functions.ExtensionBundle",
       "version": "[4.*, 5.0.0)"
     },
     "extensions": {
       "http": {
         "cors": {
           "allowedOrigins": [
             "https://www.klrab.se"
           ],
           "supportCredentials": false
         }
       }
     }
   }
📄 meeting_types/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": [ "get" ],
         "route": "meeting_types"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 package.json
   {
     "name": "macspot-api",
     "version": "1.0.0",
     "description": "Azure Functions backend för MacSpot CRM/ERP",
     "scripts": {
       "start": "func start",
       "dev": "func start --verbose",
       "deploy": "func azure functionapp publish macspotbackend",
       "build": "echo 'Nothing to build'"
     },
     "dependencies": {
       "@azure/functions": "^4.7.0",
       "@azure/msal-node": "^3.5.1",
       "@microsoft/microsoft-graph-client": "^3.0.0",
       "date-holidays": "^3.24.3",
       "dav": "^1.8.0",
       "dotenv": "^16.5.0",
       "isomorphic-fetch": "^3.0.0",
       "jsonwebtoken": "^9.0.0",
       "luxon": "^3.4.4",
       "node-fetch": "^2.7.0",
       "node-ical": "^0.20.1",
       "p-limit": "^6.2.0",
       "pg": "^8.15.6",
       "uuid": "^9.0.0",
       "xml2js": "^0.6.2"
     }
   }

📄 refreshCalendarOrigins/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 refreshTravelTimes/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 test_azurecloud/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get"],
         "route": "test_azurecloud"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 validate_contact/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get", "post"],
         "route": "validate_contact"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📈 SUMMERING AV ALLA JS-FILER
====================================
📏 Totalt antal rader kod: 875
🧩 Totalt antal funktioner: 0
🧠 Total komplexitetspoäng: 102
🧪 Antal TODO/FIXME totalt: 0

📊 Per fil:
fil,rader,funktioner,komplexitet,kommentarer,imports
sync_from_cloud.py,146,0,20,0,2
sync_to_cloud.py,222,0,38,0,3
sync_static_tables.py,61,0,6,0,2
sync.py,90,0,9,0,2
sync_all.py,195,0,23,0,7
sync_plist.xml,33,0,0,0,0
com.macspot.sync.plist,33,0,0,0,0
healthcheck_sync.py,56,0,4,0,2
macspot_launch_proxy.py,39,0,2,0,3
📊 MOLNDATABAS (Azure) – STRUKTUR & INNEHÅLL
====================================

📁 Tabell: slot_cache
  • created_at (timestamp without time zone)
  • slot_day (date)
  • slots (jsonb)
  • id (uuid)
  • meeting_length (integer)
  • booking_email (text)
  • meeting_type (text)
  • slot_part (text)
  🔑 [p] slot_cache_pkey: PRIMARY KEY (id)

📁 Tabell: calendar_origin_cache
  • created_at (timestamp without time zone)
  • timestamp (timestamp with time zone)
  • event_date (date)
  • id (integer)
  • end_time (timestamp without time zone)
  • address (text)
  • source (text)
  🔑 [c] calendar_origin_cache_source_check: CHECK ((source = ANY (ARRAY['Apple Calendar'::text, 'Microsoft 365'::text])))
  🔑 [p] calendar_origin_cache_pkey: PRIMARY KEY (id)

📁 Tabell: available_slots_cache
  • id (uuid)
  • travel_time_min (integer)
  • generated_at (timestamp without time zone)
  • expires_at (timestamp without time zone)
  • meeting_length (integer)
  • slot_day (date)
  • slot_score (integer)
  • meeting_type (text)
  • slot_part (text)
  • slot_iso (text)
  🔑 [p] available_slots_cache_pkey: PRIMARY KEY (id)

📁 Tabell: travel_time_cache
  • travel_minutes (integer)
  • updated_at (timestamp with time zone)
  • is_fallback (boolean)
  • hour (integer)
  • created_at (timestamp with time zone)
  • to_address (text)
  • from_address (text)
  🔑 [u] unique_travel_key: UNIQUE (from_address, to_address, hour)
  🧪 Topp 5 rader:
    - from_address=Taxgatan 4, 115 45 Stockholm, to_address=Maria Skolgata 79A, 118 53 Stockholm, hour=7, travel_minutes=17, created_at=2025-06-01 20:37:36.958100+00:00, updated_at=2025-06-01 20:37:36.958100+00:00, is_fallback=False
    - from_address=Taxgatan 4, 115 45 Stockholm, to_address=Maria Skolgata 79A, 118 53 Stockholm, hour=9, travel_minutes=17, created_at=2025-06-01 20:37:37.880289+00:00, updated_at=2025-06-01 20:37:37.880289+00:00, is_fallback=False
    - from_address=Taxgatan 4, 115 45 Stockholm, to_address=Maria Skolgata 79A, 118 53 Stockholm, hour=11, travel_minutes=17, created_at=2025-06-01 20:37:37.776032+00:00, updated_at=2025-06-01 20:37:37.776032+00:00, is_fallback=False
    - from_address=Taxgatan 4, 115 45 Stockholm, to_address=Maria Skolgata 79A, 118 53 Stockholm, hour=6, travel_minutes=17, created_at=2025-06-01 20:37:37.156222+00:00, updated_at=2025-06-01 20:37:37.156222+00:00, is_fallback=False
    - from_address=Taxgatan 4, 115 45 Stockholm, to_address=Maria Skolgata 79A, 118 53 Stockholm, hour=8, travel_minutes=17, created_at=2025-06-01 20:37:37.648891+00:00, updated_at=2025-06-01 20:37:37.648891+00:00, is_fallback=False

📁 Tabell: event_log
  • received_at (timestamp with time zone)
  • record_id (uuid)
  • timestamp (timestamp with time zone)
  • booking_id (uuid)
  • id (uuid)
  • payload (jsonb)
  • action (text)
  • event_type (text)
  • source (text)
  • table_name (text)
  🔑 [p] event_log_pkey: PRIMARY KEY (id)
  🧪 Topp 5 rader:
    - source=None, event_type=None, payload=None, received_at=2025-06-01 20:37:30.699890+00:00, id=2c00583c-cc66-44ed-ad81-1b404c8385ac, action=INSERT, table_name=contact, record_id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, timestamp=2025-06-01 20:37:30.699890+00:00, booking_id=None
    - source=None, event_type=calendar_response_status, payload={'response': 'none'}, received_at=2025-06-01 20:38:18.897492+00:00, id=c06ba994-c60f-4c92-8203-dc7e00070b74, action=None, table_name=None, record_id=None, timestamp=2025-06-01 20:38:18.897492+00:00, booking_id=3d09c33e-52c9-4736-975b-61ee3713551c
    - source=None, event_type=calendar_invite_sent, payload={'subject': 'Möte med KLRA Ledningsrådgivning', 'webLink': 'https://outlook.office365.com/owa/?itemid=AAMkADIyMzUxMTE1LWQ0NDUtNDMwNC05YmE3LTRhMThmNDkyNzA2ZABGAAAAAAD8zD4S9766TIdQsQEV5sX5BwB0FUy6J9MkSLnOAsVgC0tuAAAAAAENAAB0FUy6J9MkSLnOAsVgC0tuAAAnEf1vAAA%3D&exvsurl=1&path=/calendar/item', 'location': 'Online'}, received_at=2025-06-01 20:38:18.923033+00:00, id=b47ba88d-c7d2-4382-8aa5-9dcff24a5e35, action=None, table_name=None, record_id=None, timestamp=2025-06-01 20:38:18.923033+00:00, booking_id=3d09c33e-52c9-4736-975b-61ee3713551c
    - source=None, event_type=calendar_event_created, payload={'end': {'dateTime': '2025-06-02T06:30:00.0000000', 'timeZone': 'UTC'}, 'body': {'content': '<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\r\n</head>\r\n<body>\r\nDetta är en inbjudan till möte: Möte med KLRA Ledningsrådgivning\r\n</body>\r\n</html>\r\n', 'contentType': 'html'}, 'start': {'dateTime': '2025-06-02T06:20:00.0000000', 'timeZone': 'UTC'}, 'eventId': 'AAMkADIyMzUxMTE1LWQ0NDUtNDMwNC05YmE3LTRhMThmNDkyNzA2ZABGAAAAAAD8zD4S9766TIdQsQEV5sX5BwB0FUy6J9MkSLnOAsVgC0tuAAAAAAENAAB0FUy6J9MkSLnOAsVgC0tuAAAnEf1vAAA=', 'subject': 'Möte med KLRA Ledningsrådgivning', 'webLink': 'https://outlook.office365.com/owa/?itemid=AAMkADIyMzUxMTE1LWQ0NDUtNDMwNC05YmE3LTRhMThmNDkyNzA2ZABGAAAAAAD8zD4S9766TIdQsQEV5sX5BwB0FUy6J9MkSLnOAsVgC0tuAAAAAAENAAB0FUy6J9MkSLnOAsVgC0tuAAAnEf1vAAA%3D&exvsurl=1&path=/calendar/item', 'location': 'Online', 'attendees': [{'type': 'required', 'status': {'time': '0001-01-01T00:00:00Z', 'response': 'none'}, 'emailAddress': {'name': 'daniel.kallberg@mac.com', 'address': 'daniel.kallberg@mac.com'}}], 'onlineMeetingUrl': None}, received_at=2025-06-01 20:38:18.949898+00:00, id=a8781988-c135-4f0b-9eb0-16b2a88c9f9c, action=None, table_name=None, record_id=None, timestamp=2025-06-01 20:38:18.949898+00:00, booking_id=3d09c33e-52c9-4736-975b-61ee3713551c
    - source=None, event_type=calendar_invite_sent, payload={'subject': 'Möte med KLRA Ledningsrådgivning', 'webLink': 'https://us05web.zoom.us/j/82144172118?pwd=zJm2Xe3RjuaM7e7HeDLoeacSdnbaVc.1', 'location': 'Online'}, received_at=2025-06-01 20:38:18.975463+00:00, id=835d1bab-4d1a-4fe5-8da0-4597f7131fde, action=None, table_name=None, record_id=None, timestamp=2025-06-01 20:38:18.975463+00:00, booking_id=3d09c33e-52c9-4736-975b-61ee3713551c

📁 Tabell: booking_settings
  • value (jsonb)
  • updated_at (timestamp with time zone)
  • key (text)
  • value_type (text)
  🔑 [u] unique_key: UNIQUE (key)
  🧪 Topp 5 rader:
    - key=email_subject_templates, value={'zoom': 'Zoommöte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'teams': 'Teamsmöte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'atclient': 'Möte hos {{company}}: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'atoffice': 'Möte hos KLR AB (Stockholm | Södermalm): {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'facetime': 'FaceTime-möte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB'}, value_type=json, updated_at=2025-05-30 20:46:14.058171+00:00
    - key=default_language, value=sv, value_type=string, updated_at=2025-05-25 10:37:53.619684+00:00
    - key=default_meeting_length_atclient, value=[90, 180, 270, 360], value_type=array, updated_at=2025-04-23 12:48:49.778155+00:00
    - key=default_meeting_length_atoffice, value=[60, 90], value_type=array, updated_at=2025-04-23 12:48:49.778155+00:00
    - key=default_meeting_length_digital, value=[10, 20, 60], value_type=array, updated_at=2025-04-23 12:48:49.778155+00:00

📁 Tabell: translation
  • key (character varying)
  • sv (text)
  • en (text)
  🧪 Topp 5 rader:
    - key=error_invalid_phone, sv=Ogiltigt telefonnummer. Vi vet att det är svårt att komma ihåg sitt nummer., en=Invalid phone number. We know remembering your own number is hard.
    - key=error_invalid_name, sv=Namnet är ogiltigt (minst 2 tecken, max 50). Smeknamn som "X" är för Elon., en=Invalid name (min 2 characters, max 50). Nicknames like "X" are taken.
    - key=error_missing_fields, sv=Alla fält måste vara ifyllda. Vi är petiga så du slipper bli det senare., en=All fields must be filled. We’re picky so you don’t have to be later.
    - key=error_missing_meeting_link, sv=Möteslänk krävs. Om inte mötet sker via brevduva., en=A meeting link is required. Unless the meeting is via carrier pigeon.
    - key=error_missing_recaptcha, sv=reCAPTCHA måste verifieras. Nej, det är inte en känslomässig fråga., en=reCAPTCHA verification required. And no, it’s not a personality test.

📁 Tabell: bookings
  • start_time (timestamp with time zone)
  • end_time (timestamp with time zone)
  • id (uuid)
  • updated_at (timestamp with time zone)
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • contact_id (uuid)
  • meeting_type (text)
  • booking_email (text)
  🔑 [p] bookings_pkey: PRIMARY KEY (id)
  🔑 [f] fk_bookings_contact: FOREIGN KEY (contact_id) REFERENCES contact(id) ON DELETE SET NULL
  🧪 Topp 5 rader:
    - start_time=2025-06-02 06:20:00+00:00, end_time=2025-06-02 06:30:00+00:00, meeting_type=zoom, metadata={'phone': '098765432', 'company': 'persson AB', 'subject': 'Möte med KLRA Ledningsrådgivning', 'location': 'Online', 'last_name': 'Johansson', 'first_name': 'Per', 'ip_address': '172.226.49.45:48167', 'meeting_id': 82144172118, 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'https://us05web.zoom.us/j/82144172118?pwd=zJm2Xe3RjuaM7e7HeDLoeacSdnbaVc.1', 'meeting_length': 10, 'calendar_response_status': 'none'}, created_at=2025-06-01 20:38:17.398000+00:00, contact_id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, id=3d09c33e-52c9-4736-975b-61ee3713551c, updated_at=2025-06-01 20:38:17.398000+00:00, booking_email=daniel.kallberg@mac.com
    - start_time=2025-06-02 08:00:00+00:00, end_time=2025-06-02 08:10:00+00:00, meeting_type=zoom, metadata={'phone': '098765432', 'company': 'persson AB', 'subject': 'Möte med KLRA Ledningsrådgivning', 'location': 'Online', 'last_name': 'Johansson', 'first_name': 'Per', 'ip_address': '172.226.49.45:47716', 'meeting_id': 83811214708, 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'https://us05web.zoom.us/j/83811214708?pwd=uDzaG32s3i87PlV0pOwojrXUzZ7aEg.1', 'meeting_length': 10, 'calendar_response_status': 'none'}, created_at=2025-06-01 20:50:09.892000+00:00, contact_id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, id=059ec692-02af-40c7-9501-0679d86b81dd, updated_at=2025-06-01 20:50:09.892000+00:00, booking_email=daniel.kallberg@mac.com
    - start_time=2025-06-02 08:40:00+00:00, end_time=2025-06-02 09:00:00+00:00, meeting_type=zoom, metadata={'phone': '098765432', 'company': 'persson AB', 'subject': 'Möte med KLRA Ledningsrådgivning', 'location': 'Online', 'last_name': 'Johansson', 'first_name': 'Per', 'ip_address': '172.226.49.45:47708', 'meeting_id': 86400396910, 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'https://us05web.zoom.us/j/86400396910?pwd=z8fdhAA8ibZ5hxJEpmebYHaX57JugC.1', 'meeting_length': 20, 'calendar_response_status': 'none'}, created_at=2025-06-01 20:56:02.371000+00:00, contact_id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, id=967fa70d-2409-4884-8d5b-f2c036eb1a99, updated_at=2025-06-01 20:56:02.371000+00:00, booking_email=daniel.kallberg@mac.com
    - start_time=2025-06-02 09:20:00+00:00, end_time=2025-06-02 09:30:00+00:00, meeting_type=zoom, metadata={'phone': '098765432', 'company': 'persson AB', 'subject': 'Zoommöte: Per | persson AB & Daniel | Kinnekulle Ledningsrådgivning AB', 'location': 'Online', 'last_name': 'Johansson', 'first_name': 'Per', 'ip_address': '172.226.49.45:46831', 'meeting_id': 81612591010, 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'https://us05web.zoom.us/j/81612591010?pwd=3Pu0VQxyWyR0pPab7OlpAfKb7CpiWq.1', 'meeting_length': 10, 'calendar_response_status': 'none'}, created_at=2025-06-01 21:01:27.794000+00:00, contact_id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, id=1a231d98-2e66-41ae-a718-6048aa624601, updated_at=2025-06-01 21:01:27.794000+00:00, booking_email=daniel.kallberg@mac.com
    - start_time=2025-06-02 11:20:00+00:00, end_time=2025-06-02 11:30:00+00:00, meeting_type=facetime, metadata={'phone': '070-2656868', 'company': 'Anna AB', 'subject': 'FaceTime-möte: Anna | Anna AB & Daniel | Kinnekulle Ledningsrådgivning AB', 'location': 'FaceTime', 'last_name': 'Sahlin', 'first_name': 'Anna', 'ip_address': '81.233.161.165:58650', 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'facetime:070-2656868', 'body_preview': '<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\r\n</head>\r\n<body>\r\nDetta är en inbjudan till möte: FaceTime-möte: Anna | Anna AB &amp; Daniel | Kinnekulle Ledningsrådgivning AB\r\n</body>\r\n</html>\r\n', 'meeting_length': 10, 'calendar_response_status': 'none'}, created_at=2025-06-01 21:14:06.367000+00:00, contact_id=6dedbbd8-661f-4f87-9b54-e302bdd6f61a, id=affd507f-ee62-4ad0-b723-609100422f3b, updated_at=2025-06-01 21:14:06.367000+00:00, booking_email=annapanna79@yahoo.com

📁 Tabell: pending_changes
  • booking_id (uuid)
  • processed (boolean)
  • created_at (timestamp with time zone)
  • payload (jsonb)
  • id (uuid)
  • record_id (uuid)
  • table_name (text)
  • operation (text)
  • change_type (text)
  • direction (text)
  🔑 [p] pending_changes_pkey: PRIMARY KEY (id)
  🔑 [f] fk_pending_changes_booking_id: FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
  🧪 Topp 5 rader:
    - id=fff97701-6232-4ac2-ba9f-b1c02769b414, table_name=bookings, record_id=3d09c33e-52c9-4736-975b-61ee3713551c, change_type=INSERT, direction=cloud_to_local, processed=False, created_at=2025-06-01 20:38:19.055000+00:00, operation=None, payload=None, booking_id=3d09c33e-52c9-4736-975b-61ee3713551c
    - id=93cd0ba6-50f9-4c4b-80f4-5822c0f14912, table_name=bookings, record_id=059ec692-02af-40c7-9501-0679d86b81dd, change_type=INSERT, direction=cloud_to_local, processed=False, created_at=2025-06-01 20:50:11.295000+00:00, operation=None, payload=None, booking_id=059ec692-02af-40c7-9501-0679d86b81dd
    - id=c13128f8-3198-4d29-9b4b-673ff2dabe41, table_name=bookings, record_id=967fa70d-2409-4884-8d5b-f2c036eb1a99, change_type=INSERT, direction=cloud_to_local, processed=False, created_at=2025-06-01 20:56:03.629000+00:00, operation=None, payload=None, booking_id=967fa70d-2409-4884-8d5b-f2c036eb1a99
    - id=fbd2921d-a75d-49b3-b1af-a62fc5cb4652, table_name=bookings, record_id=1a231d98-2e66-41ae-a718-6048aa624601, change_type=INSERT, direction=cloud_to_local, processed=False, created_at=2025-06-01 21:01:29.511000+00:00, operation=None, payload=None, booking_id=1a231d98-2e66-41ae-a718-6048aa624601
    - id=9c53a7e8-4147-482e-93e7-0e5c9a4002a1, table_name=bookings, record_id=affd507f-ee62-4ad0-b723-609100422f3b, change_type=INSERT, direction=cloud_to_local, processed=False, created_at=2025-06-01 21:14:07.151000+00:00, operation=None, payload=None, booking_id=affd507f-ee62-4ad0-b723-609100422f3b

📁 Tabell: contact
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • id (uuid)
  • updated_at (timestamp with time zone)
  • booking_email (text)
  • email (text)
  🔑 [p] contact_pkey: PRIMARY KEY (id)
  🧪 Topp 5 rader:
    - metadata={'phone': '098765432', 'origin': 'klrab.se', 'company': 'persson AB', 'last_name': 'Johansson', 'first_name': 'Per'}, created_at=2025-06-01 20:37:30.699890+00:00, id=4ce9fc3f-d44f-40ca-aa9d-13e4db7f0f31, booking_email=daniel.kallberg@mac.com, updated_at=2025-06-02 06:13:47.337045+00:00, email=daniel.kallberg@mac.com
    - metadata={'phone': '070-2656868', 'origin': 'klrab.se', 'company': 'Anna AB', 'last_name': 'Sahlin', 'first_name': 'Anna'}, created_at=2025-06-01 21:13:46.657884+00:00, id=6dedbbd8-661f-4f87-9b54-e302bdd6f61a, booking_email=annapanna79@yahoo.com, updated_at=2025-06-02 06:13:47.337045+00:00, email=annapanna79@yahoo.com

