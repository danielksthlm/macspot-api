📂 KODTRÄD
==========
├── local_backend
│   ├── config.py
│   ├── main.py
│   ├── modules
│   │   ├── crm
│   │   │   ├── routes.py
│   │   │   ├── services.py
==========

====================
📄 Fil: config.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-03 09:23:13
📏 Antal rader: 9
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 1 – ['import os']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 0
🧪 TODO/FIXME: 0
====================
START: config.py
import os
from dotenv import load_dotenv
from pathlib import Path

# Ladda .env från projektroten
env_path = Path(__file__).resolve().parents[2] / ".env"
load_dotenv(dotenv_path=env_path)

DB_DSN = os.getenv("LOCAL_DB_DSN")  # alt. bygg ihop från PGHOST, etc
END: config.py

====================
📄 Fil: main.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-03 09:22:37
📏 Antal rader: 8
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 1 – ['import os']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 0
🧪 TODO/FIXME: 0
====================
START: main.py
from fastapi import FastAPI
import os
from dotenv import load_dotenv
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), "..", ".env"))
from local_backend.modules.crm.routes import router as crm_router

app = FastAPI()
app.include_router(crm_router)
END: main.py

====================
📄 Fil: history/local_backend_history (kopia).py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-03 06:50:24
📏 Antal rader: 354
🧩 Antal funktioner: 1
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 6 – ['import os', 'import jsonschema', 'import glob', 'elif "require(" in rad_strip:', 'import json', 'import psycopg2']
🔍 Längsta funktion: 1 rader
🧠 Komplexitetspoäng: 59
🧪 TODO/FIXME: 4
====================
START: local_backend_history (kopia).py
import os
from dotenv import load_dotenv
load_dotenv()
from datetime import datetime
import jsonschema

total_rader = 0
total_funktioner = 0
total_komplexitet = 0
total_todo = 0

# Lista över filnamn
import glob

rotmapp = "/Users/danielkallberg/Documents/KLR_AI/Projekt_MacSpot/macspot-api/local_backend"
filnamn_lista = glob.glob(os.path.join(rotmapp, "**/*.js"), recursive=True) + glob.glob(os.path.join(rotmapp, "**/*.py"), recursive=True)
# Exkludera local_backend/history/local_backend_history.py
filnamn_lista = [f for f in filnamn_lista if not f.endswith("local_backend/history/local_backend_history.py")]

# Slutlig sammanslagen fil
output_fil = os.path.join(rotmapp, "history", f"AllLocalBackend_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

saknade_filer = []
# Läs och skriv innehåll
with open(output_fil, "w", encoding="utf-8") as utfil:
    # Trädstruktur
    from collections import defaultdict

    def bygg_träd(paths):
        träd = lambda: defaultdict(träd)
        rot = träd()
        for path in paths:
            delar = os.path.relpath(path, os.path.dirname(root_path)).split(os.sep)
            curr = rot
            for del_ in delar:
                curr = curr[del_]
        return rot

    def skriv_träd(node, depth=0):
        for namn in sorted(node.keys()):
            prefix = "│   " * depth + "├── "
            utfil.write(f"{prefix}{namn}\n")
            skriv_träd(node[namn], depth + 1)

    root_path = rotmapp
    filtrerat = [f for f in filnamn_lista if "node_modules" not in f and "/history/" not in f]
    struktur = bygg_träd(filtrerat)
    utfil.write("📂 KODTRÄD\n==========\n")
    skriv_träd(struktur)
    utfil.write("==========\n\n")

    for filnamn in filnamn_lista:
        visat_filnamn = os.path.basename(filnamn)
        rel_path = os.path.relpath(filnamn, root_path)
        # Bestäm kodtyp baserat på sökvägen
        if "/shared/" in rel_path:
            kodtyp = "🔧 Shared-modul"
        elif "/validate_contact/" in rel_path:
            kodtyp = "📬 Kontaktvalidering"
        elif "/meeting_types/" in rel_path:
            kodtyp = "📅 Mötestyp-endpoint"
        elif "/getavailableslots/" in rel_path:
            kodtyp = "🧠 Slot-generator"
        elif "/refreshCalendarOrigins/" in rel_path:
            kodtyp = "🔁 Kalender-refresh"
        elif "/refreshTravelTimes/" in rel_path:
            kodtyp = "🚗 Restids-refresh"
        elif "/bookings/" in rel_path:
            kodtyp = "📤 Boknings-API"
        else:
            kodtyp = "📄 Övrigt"
        if os.path.exists(filnamn):
            # Läs filens rader
            with open(filnamn, "r", encoding="utf-8") as infil:
                rader = infil.readlines()
            antal_rader = len(rader)
            # Imports
            imports = []
            import_count = 0
            for rad in rader:
                rad_strip = rad.strip()
                if rad_strip.startswith("import "):
                    imports.append(rad_strip)
                    import_count += 1
                elif "require(" in rad_strip:
                    imports.append(rad_strip)
                    import_count += 1

            # Funktioner
            funktion_count = 0
            # Längsta funktion (förenklad heuristik)
            longest_func = 0
            i = 0
            while i < len(rader):
                rad = rader[i].strip()
                is_func = (
                    rad.startswith("function ")
                    or ("const " in rad and "=" in rad and "(" in rad and rad.rstrip().endswith("{"))
                    or ("=>" in rad and ("const " in rad or "let " in rad or "var " in rad))
                )
                if is_func:
                    funktion_count += 1
                    start = i
                    j = i + 1
                    brace_count = 0
                    if "{" in rad:
                        brace_count += rad.count("{")
                        brace_count -= rad.count("}")
                    while j < len(rader):
                        line = rader[j]
                        brace_count += line.count("{")
                        brace_count -= line.count("}")
                        # Slut på funktion: när klammern är stängd eller tomrad (förenklad)
                        if brace_count <= 0 or line.strip() == "":
                            break
                        j += 1
                    func_len = j - start
                    if func_len > longest_func:
                        longest_func = func_len
                    i = j
                else:
                    i += 1

            # Kommentarstäckning
            kommentar_rader = 0
            for rad in rader:
                rad_strip = rad.strip()
                if (
                    rad_strip.startswith("//")
                    or rad_strip.startswith("/*")
                    or rad_strip.startswith("*")
                    or rad_strip.startswith("*/")
                ):
                    kommentar_rader += 1
            # Komplexitetsord
            komplex_ord = ["if", "for", "while", "switch", "try"]
            komplex_count = 0
            for rad in rader:
                for ord in komplex_ord:
                    # Enkla sök (kan ge dubletter om flera per rad)
                    komplex_count += rad.count(f"{ord} ")
                    komplex_count += rad.count(f"{ord}(")
            # TODO/FIXME
            todo_count = 0
            for rad in rader:
                if "TODO" in rad or "FIXME" in rad:
                    todo_count += 1
            # Senast ändrad
            senast_andrad_ts = os.path.getmtime(filnamn)
            senast_andrad = datetime.fromtimestamp(senast_andrad_ts).strftime("%Y-%m-%d %H:%M:%S")

            # Bestäm kodspråk baserat på filändelse
            if filnamn.endswith(".js"):
                kodspråk = "🟨 JavaScript"
            elif filnamn.endswith(".py"):
                kodspråk = "🐍 Python"
            elif filnamn.endswith(".json"):
                kodspråk = "🧾 JSON"
            else:
                kodspråk = "📄 Okänt format"

            total_rader += antal_rader
            total_funktioner += funktion_count
            total_komplexitet += komplex_count
            total_todo += todo_count

            if 'fil_summering' not in locals():
                fil_summering = []
            fil_summering.append([
                visat_filnamn,
                antal_rader,
                funktion_count,
                komplex_count,
                kommentar_rader,
                import_count
            ])

            # Skriv metadata-block
            utfil.write("====================\n")
            utfil.write(f"📄 Fil: {rel_path}\n")
            utfil.write(f"📂 Kodtyp: {kodtyp}\n")
            utfil.write(f"🗂 Filtyp: {kodspråk}\n")
            utfil.write(f"📅 Senast ändrad: {senast_andrad}\n")
            utfil.write(f"📏 Antal rader: {antal_rader}\n")
            utfil.write(f"🧩 Antal funktioner: {funktion_count}\n")
            utfil.write(f"💬 Kommentarstäckning: {kommentar_rader} rader ({(kommentar_rader / antal_rader * 100):.1f}%)\n")
            utfil.write(f"📥 Imports: {import_count} – {imports if imports else 'Inga'}\n")
            utfil.write(f"🔍 Längsta funktion: {longest_func} rader\n")
            utfil.write(f"🧠 Komplexitetspoäng: {komplex_count}\n")
            utfil.write(f"🧪 TODO/FIXME: {todo_count}\n")
            utfil.write("====================\n")
            utfil.write(f"START: {visat_filnamn}\n")
            with open(filnamn, "r", encoding="utf-8") as infil:
                utfil.write(infil.read())
            utfil.write(f"\nEND: {visat_filnamn}\n\n")
        else:
            utfil.write(f"START: {visat_filnamn}\n")
            utfil.write(f"// ⚠️ Filen '{visat_filnamn}' hittades inte\n")
            utfil.write(f"END: {visat_filnamn}\n\n")
            saknade_filer.append(visat_filnamn)

    # Lista alla relevanta konfigurationsfiler i hela local_backend
    utfil.write("📁 KONFIGURATIONSFILER (function.json / host.json / package.json / .funcignore)\n")
    utfil.write("====================================\n\n")
    config_filer = []
    for filnamn in ["function.json", "host.json", "package.json", ".funcignore"]:
        config_filer += glob.glob(os.path.join(root_path, "**", filnamn), recursive=True)
    config_filer = [f for f in config_filer if "node_modules" not in f]

    host_schema = {
      "type": "object",
      "properties": {
        "version": {"type": "string"},
        "extensionBundle": {
          "type": "object",
          "properties": {
            "id": {"type": "string"},
            "version": {"type": "string"}
          },
          "required": ["id", "version"]
        }
      },
      "required": ["version"]
    }

    if config_filer:
        for config_fil in sorted(config_filer):
            rel_path = os.path.relpath(config_fil, root_path)
            utfil.write(f"📄 {rel_path}\n")
            try:
                if os.path.basename(config_fil) == "host.json":
                    import json
                    data = json.load(open(config_fil))
                    jsonschema.validate(instance=data, schema=host_schema)
                with open(config_fil, "r", encoding="utf-8") as cf:
                    for rad in cf:
                        utfil.write("   " + rad)
            except jsonschema.exceptions.ValidationError as ve:
                utfil.write(f"   // ❌ Ogiltig host.json: {ve.message}\n")
            except Exception as e:
                utfil.write(f"   // ⚠️ Kunde inte läsa filen: {e}\n")
            utfil.write("\n")
    else:
        utfil.write("Inga function.json, host.json, package.json eller .funcignore hittades i projektet.\n\n")

    utfil.write("📈 SUMMERING AV ALLA JS-FILER\n")
    utfil.write("====================================\n")
    utfil.write(f"📏 Totalt antal rader kod: {total_rader}\n")
    utfil.write(f"🧩 Totalt antal funktioner: {total_funktioner}\n")
    utfil.write(f"🧠 Total komplexitetspoäng: {total_komplexitet}\n")
    utfil.write(f"🧪 Antal TODO/FIXME totalt: {total_todo}\n\n")
    utfil.write("📊 Per fil:\n")
    utfil.write("fil,rader,funktioner,komplexitet,kommentarer,imports\n")
    for row in fil_summering:
        utfil.write(",".join(str(x) for x in row) + "\n")

if saknade_filer:
    print("⚠️ Följande filer hittades inte:")
    for fil in saknade_filer:
        print(f" - {fil}")

# Slutlig sammanslagen fil

import psycopg2

def generera_lokal_databasstruktur(output_path):
    # Denna funktion ansluter till lokal databas för att hämta struktur och innehåll
    try:
        conn = psycopg2.connect(
            dbname=os.environ["LOCAL_DB_NAME"],
            user=os.environ["LOCAL_DB_USER"],
            password=os.environ["LOCAL_DB_PASSWORD"],
            host=os.environ.get("LOCAL_DB_HOST", "localhost"),
            port=os.environ.get("LOCAL_DB_PORT", 5432),
        )
        cur = conn.cursor()
        with open(output_path, "a", encoding="utf-8") as f:
            f.write("📊 LOKAL DATABAS – STRUKTUR & INNEHÅLL\n")
            f.write("====================================\n\n")
            # Tabeller
            cur.execute("""
                SELECT tablename FROM pg_tables WHERE schemaname = 'public'
            """)
            tables = [row[0] for row in cur.fetchall()]
            for table in tables:
                f.write(f"📁 Tabell: {table}\n")
                # Kolumner
                cur.execute(f"""
                    SELECT column_name, data_type
                    FROM information_schema.columns
                    WHERE table_name = %s
                """, (table,))
                cols = cur.fetchall()
                for col in cols:
                    f.write(f"  • {col[0]} ({col[1]})\n")
                # Kolumntyper
                f.write("  📐 Kolumntyper:\n")
                for col in cols:
                    f.write(f"    - {col[0]}: {col[1]}\n")
                # Primär-/sekundärnycklar
                cur.execute("""
                    SELECT conname, contype, pg_get_constraintdef(c.oid)
                    FROM pg_constraint c
                    JOIN pg_class t ON c.conrelid = t.oid
                    WHERE t.relname = %s
                """, (table,))
                keys = cur.fetchall()
                for key in keys:
                    f.write(f"  🔑 [{key[1]}] {key[0]}: {key[2]}\n")
                # Relationer
                f.write("  🔗 Relationer:\n")
                cur.execute("""
                    SELECT
                        tc.constraint_name, tc.table_name, kcu.column_name,
                        ccu.table_name AS foreign_table_name,
                        ccu.column_name AS foreign_column_name
                    FROM
                        information_schema.table_constraints AS tc
                        JOIN information_schema.key_column_usage AS kcu
                          ON tc.constraint_name = kcu.constraint_name
                        JOIN information_schema.constraint_column_usage AS ccu
                          ON ccu.constraint_name = tc.constraint_name
                    WHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_name = %s;
                """, (table,))
                rels = cur.fetchall()
                for rel in rels:
                    f.write(f"    - {rel[2]} ➡ {rel[3]}.{rel[4]}\n")
                # Triggers
                f.write("  ⚙️ Triggers:\n")
                cur.execute("""
                    SELECT trigger_name, event_manipulation, action_statement
                    FROM information_schema.triggers
                    WHERE event_object_table = %s;
                """, (table,))
                triggers = cur.fetchall()
                for trig in triggers:
                    f.write(f"    - {trig[0]} ({trig[1]}): {trig[2]}\n")
                # Exempelrader (max 5)
                cur.execute(f"SELECT * FROM {table}")
                rows = cur.fetchall()
                if rows:
                    colnames = [desc[0] for desc in cur.description]
                    f.write("  🧪 Exempelrader:\n")
                    for i, row in enumerate(rows):
                        if i >= 5:
                            break
                        f.write("    - " + ", ".join(f"{k}={v}" for k, v in zip(colnames, row)) + "\n")
                f.write("\n")
        cur.close()
        conn.close()
    except Exception as e:
        print("⚠️ Fel vid hämtning av databasstruktur:", e)

generera_lokal_databasstruktur(output_fil)

END: local_backend_history (kopia).py

====================
📄 Fil: modules/crm/services.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-03 09:24:16
📏 Antal rader: 67
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 3 – ['import os', 'import asyncpg', 'import json']
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 5
🧪 TODO/FIXME: 0
====================
START: services.py
import os
import asyncpg
from typing import List

import json

def fix_encoding(text):
    if isinstance(text, str):
        try:
            return text.encode("latin1").decode("utf-8")
        except Exception:
            return text
    return text

async def get_all_contacts():
    db_url = os.environ["LOCAL_DATABASE_URL"]
    conn = await asyncpg.connect(dsn=db_url)
    rows = await conn.fetch("""
        SELECT 
            c.id,
            c.email,
            c.booking_email,
            c.metadata,
            COALESCE(b.count, 0) AS booking_count
        FROM contact c
        LEFT JOIN (
            SELECT contact_id, COUNT(*) AS count
            FROM bookings
            GROUP BY contact_id
        ) b ON c.id = b.contact_id
        ORDER BY c.created_at DESC
        LIMIT 100
    """)
    await conn.close()
    contacts = []
    for row in rows:
        metadata_raw = row["metadata"]
        if isinstance(metadata_raw, dict):
            metadata = metadata_raw
        elif isinstance(metadata_raw, str):
            try:
                metadata = json.loads(metadata_raw)
            except Exception:
                metadata = {}
        else:
            metadata = {}
        print("RAW last_name:", metadata.get("last_name"))
        contacts.append({
            "id": str(row["id"]),
            "email": row["email"],
            "booking_email": row["booking_email"],
            "first_name": fix_encoding(metadata.get("first_name")),
            "last_name": fix_encoding(metadata.get("last_name")),
            "company": fix_encoding(metadata.get("company")),
            "phone": metadata.get("phone"),
            "booking_count": row["booking_count"]
        })
    return contacts

async def get_contact_by_id(contact_id: str):
    db_url = os.environ["LOCAL_DATABASE_URL"]
    conn = await asyncpg.connect(dsn=db_url)
    row = await conn.fetchrow("SELECT * FROM contact WHERE id = $1", contact_id)
    await conn.close()
    if row:
        return dict(row)
    return {"error": "Contact not found"}
END: services.py

====================
📄 Fil: modules/crm/routes.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-03 08:06:43
📏 Antal rader: 14
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 0
🧪 TODO/FIXME: 0
====================
START: routes.py
from fastapi import APIRouter
from fastapi.responses import JSONResponse
from .services import get_all_contacts, get_contact_by_id

router = APIRouter(prefix="/contacts", tags=["contacts"])

@router.get("/")
async def list_contacts():
    data = await get_all_contacts()
    return JSONResponse(content=data, media_type="application/json; charset=utf-8")

@router.get("/{contact_id}")
async def get_contact(contact_id: str):
    return await get_contact_by_id(contact_id)
END: routes.py

📁 KONFIGURATIONSFILER (function.json / host.json / package.json / .funcignore)
====================================

Inga function.json, host.json, package.json eller .funcignore hittades i projektet.

📈 SUMMERING AV ALLA JS-FILER
====================================
📏 Totalt antal rader kod: 452
🧩 Totalt antal funktioner: 1
🧠 Total komplexitetspoäng: 64
🧪 Antal TODO/FIXME totalt: 4

📊 Per fil:
fil,rader,funktioner,komplexitet,kommentarer,imports
config.py,9,0,0,0,1
main.py,8,0,0,0,1
local_backend_history (kopia).py,354,1,59,0,6
services.py,67,0,5,0,3
routes.py,14,0,0,0,0
📊 LOKAL DATABAS – STRUKTUR & INNEHÅLL
====================================

📁 Tabell: bookings
  • start_time (timestamp with time zone)
  • end_time (timestamp with time zone)
  • id (uuid)
  • updated_at (timestamp with time zone)
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • contact_id (uuid)
  • meeting_type (text)
  • booking_email (text)
  📐 Kolumntyper:
    - start_time: timestamp with time zone
    - end_time: timestamp with time zone
    - id: uuid
    - updated_at: timestamp with time zone
    - metadata: jsonb
    - created_at: timestamp with time zone
    - contact_id: uuid
    - meeting_type: text
    - booking_email: text
  🔑 [p] bookings_pkey: PRIMARY KEY (id)
  🔑 [f] fk_bookings_contact: FOREIGN KEY (contact_id) REFERENCES contact(id) ON DELETE SET NULL
  🔗 Relationer:
    - contact_id ➡ contact.id
  ⚙️ Triggers:
    - log_bookings_change_trigger (INSERT): EXECUTE FUNCTION log_bookings_change()
    - log_bookings_change_trigger (DELETE): EXECUTE FUNCTION log_bookings_change()
    - log_bookings_change_trigger (UPDATE): EXECUTE FUNCTION log_bookings_change()
    - audit_sync_bookings_trigger (INSERT): EXECUTE FUNCTION log_bookings_change()
    - audit_sync_bookings_trigger (DELETE): EXECUTE FUNCTION log_bookings_change()
    - audit_sync_bookings_trigger (UPDATE): EXECUTE FUNCTION log_bookings_change()
  🧪 Exempelrader:
    - start_time=2025-06-03 08:00:00+02:00, end_time=2025-06-03 08:10:00+02:00, meeting_type=facetime, metadata={'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'subject': 'FaceTime-möte: Daniel | Test AB & Daniel | Kinnekulle Ledningsrådgivning AB', 'location': 'FaceTime', 'last_name': 'Källberg', 'first_name': 'Daniel', 'ip_address': '172.226.49.36:49063', 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'facetime:070956145345', 'body_preview': '<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\r\n</head>\r\n<body>\r\nDetta är en inbjudan till möte: FaceTime-möte: Daniel | Test AB &amp; Daniel | Kinnekulle Ledningsrådgivning AB\r\n</body>\r\n</html>\r\n', 'meeting_length': 10, 'calendar_response_status': 'none'}, created_at=2025-06-02 22:50:37.228000+02:00, contact_id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, id=66143b52-dc79-448c-a6a9-ad4c6f6d7914, updated_at=2025-06-02 22:50:37.228000+02:00, booking_email=daniel.kallberg@mac.com

📁 Tabell: contact
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • id (uuid)
  • updated_at (timestamp with time zone)
  • booking_email (text)
  • email (text)
  📐 Kolumntyper:
    - metadata: jsonb
    - created_at: timestamp with time zone
    - id: uuid
    - updated_at: timestamp with time zone
    - booking_email: text
    - email: text
  🔑 [p] contact_pkey: PRIMARY KEY (id)
  🔗 Relationer:
  ⚙️ Triggers:
    - log_contact_change_trigger (INSERT): EXECUTE FUNCTION log_contact_change()
    - log_contact_change_trigger (DELETE): EXECUTE FUNCTION log_contact_change()
    - log_contact_change_trigger (UPDATE): EXECUTE FUNCTION log_contact_change()
    - audit_sync_contact_trigger (INSERT): EXECUTE FUNCTION log_contact_change()
    - audit_sync_contact_trigger (DELETE): EXECUTE FUNCTION log_contact_change()
    - audit_sync_contact_trigger (UPDATE): EXECUTE FUNCTION log_contact_change()
  🧪 Exempelrader:
    - metadata={'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'last_name': 'Källberg', 'first_name': 'Daniel'}, created_at=2025-06-02 22:50:24.084981+02:00, id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, booking_email=daniel.kallberg@mac.com, updated_at=2025-06-02 22:50:24.084981+02:00, email=daniel.kallberg@mac.com

📁 Tabell: booking_settings
  • value (jsonb)
  • updated_at (timestamp with time zone)
  • key (text)
  • value_type (text)
  📐 Kolumntyper:
    - value: jsonb
    - updated_at: timestamp with time zone
    - key: text
    - value_type: text
  🔑 [p] booking_settings_pkey: PRIMARY KEY (key)
  🔗 Relationer:
  ⚙️ Triggers:
  🧪 Exempelrader:
    - key=email_subject_templates, value={'zoom': 'Zoommöte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'teams': 'Teamsmöte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'atclient': 'Möte hos {{company}}: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'atoffice': 'Möte hos KLR AB (Stockholm | Södermalm): {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB', 'facetime': 'FaceTime-möte: {{first_name}} | {{company}} & Daniel | Kinnekulle Ledningsrådgivning AB'}, value_type=json, updated_at=2025-05-30 22:46:14.058171+02:00
    - key=default_language, value=sv, value_type=string, updated_at=2025-05-25 12:37:53.619684+02:00
    - key=default_meeting_length_atclient, value=[90, 180, 270, 360], value_type=array, updated_at=2025-04-23 14:48:49.778155+02:00
    - key=default_meeting_length_atoffice, value=[60, 90], value_type=array, updated_at=2025-04-23 14:48:49.778155+02:00
    - key=default_meeting_length_digital, value=[10, 20, 60], value_type=array, updated_at=2025-04-23 14:48:49.778155+02:00

📁 Tabell: company
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • id (uuid)
  • name (text)
  • org_number (text)
  📐 Kolumntyper:
    - metadata: jsonb
    - created_at: timestamp with time zone
    - id: uuid
    - name: text
    - org_number: text
  🔑 [p] company_pkey: PRIMARY KEY (id)
  🔗 Relationer:
  ⚙️ Triggers:

📁 Tabell: translation
  • key (character varying)
  • sv (text)
  • en (text)
  📐 Kolumntyper:
    - key: character varying
    - sv: text
    - en: text
  🔑 [u] unique_translation_key: UNIQUE (key)
  🔑 [p] translation_pkey: PRIMARY KEY (key)
  🔗 Relationer:
  ⚙️ Triggers:
  🧪 Exempelrader:
    - key=error_min_duration_fysiskt_kund, sv=Mötestiden för 'Fysiskt hos kund' måste vara minst {{minutes}} minuter. Du visste det redan., en=The meeting time for 'On-site at customer' must be at least {{minutes}} minutes. You knew that.
    - key=error_min_duration_fysiskt_mig, sv=Mötestiden för 'Fysiskt hos mig' måste vara minst {{minutes}} minuter. Annars hinner vi bara säga hej., en=The meeting time for 'At my office' must be at least {{minutes}} minutes. Otherwise, we’ll only have time to say hello.
    - key=email_body_booking_received, sv=Hej {{name}}! Vi har tagit emot din bokning för {{meeting_type}} mellan {{start_time}} och {{end_time}}. Ingen panik – vi återkommer med bekräftelse. / Daniel, en=Hello {{name}}, We’ve received your booking for {{meeting_type}} between {{start_time}} and {{end_time}}. No need to panic – we’ll confirm shortly. / Daniel
    - key=email_body_booking_confirmed, sv=Hej {{name}}! Din bokning för {{meeting_type}} mellan {{start_time}} och {{end_time}} är nu spikad. Ser fram emot det! / Daniel, en=Hello {{name}}, Your booking for {{meeting_type}} between {{start_time}} and {{end_time}} is now locked in. Looking forward! / Daniel
    - key=email_body_booking_cancelled, sv=Hej {{name}}! Din bokning för {{meeting_type}} mellan {{start_time}} och {{end_time}} är avbokad. Hör av dig om du vill hitta en ny tid. / Daniel, en=Hello {{name}}, Your booking for {{meeting_type}} between {{start_time}} and {{end_time}} has been cancelled. Let me know if you'd like a new one. / Daniel

📁 Tabell: ccrelation
  • id (uuid)
  • company_id (uuid)
  • contact_id (uuid)
  • main_contact (boolean)
  • start_date (date)
  • end_date (date)
  • metadata (jsonb)
  • created_at (timestamp with time zone)
  • role (text)
  📐 Kolumntyper:
    - id: uuid
    - company_id: uuid
    - contact_id: uuid
    - main_contact: boolean
    - start_date: date
    - end_date: date
    - metadata: jsonb
    - created_at: timestamp with time zone
    - role: text
  🔑 [p] ccrelation_pkey: PRIMARY KEY (id)
  🔑 [f] fk_ccrelation_contact_id: FOREIGN KEY (contact_id) REFERENCES contact(id) ON DELETE CASCADE
  🔑 [f] fk_ccrelation_company_id: FOREIGN KEY (company_id) REFERENCES company(id) ON DELETE CASCADE
  🔗 Relationer:
    - contact_id ➡ contact.id
    - company_id ➡ company.id
  ⚙️ Triggers:

📁 Tabell: pending_changes
  • booking_id (uuid)
  • processed (boolean)
  • created_at (timestamp with time zone)
  • payload (jsonb)
  • id (uuid)
  • record_id (uuid)
  • table_name (text)
  • operation (text)
  • change_type (text)
  • direction (text)
  📐 Kolumntyper:
    - booking_id: uuid
    - processed: boolean
    - created_at: timestamp with time zone
    - payload: jsonb
    - id: uuid
    - record_id: uuid
    - table_name: text
    - operation: text
    - change_type: text
    - direction: text
  🔑 [p] pending_changes_pkey: PRIMARY KEY (id)
  🔑 [f] fk_pending_changes_booking_id: FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
  🔗 Relationer:
    - booking_id ➡ bookings.id
  ⚙️ Triggers:
  🧪 Exempelrader:
    - id=76c81527-5339-4454-95e1-20f930561ed4, table_name=contact, record_id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, change_type=INSERT, direction=out, processed=False, created_at=2025-06-02 22:51:38.761446+02:00, operation=INSERT, payload={'id': '1138f1b8-d247-4bb8-b9a1-57340b6da8ff', 'email': 'daniel.kallberg@mac.com', 'metadata': {'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'last_name': 'Källberg', 'first_name': 'Daniel'}, 'created_at': '2025-06-02T22:50:24.084981+02:00', 'updated_at': '2025-06-02T22:50:24.084981+02:00', 'booking_email': 'daniel.kallberg@mac.com'}, booking_id=None
    - id=49aac044-f005-44f6-ba9e-7a19906c8eb0, table_name=contact, record_id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, change_type=INSERT, direction=out, processed=False, created_at=2025-06-02 22:51:38.761446+02:00, operation=INSERT, payload={'id': '1138f1b8-d247-4bb8-b9a1-57340b6da8ff', 'email': 'daniel.kallberg@mac.com', 'metadata': {'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'last_name': 'Källberg', 'first_name': 'Daniel'}, 'created_at': '2025-06-02T22:50:24.084981+02:00', 'updated_at': '2025-06-02T22:50:24.084981+02:00', 'booking_email': 'daniel.kallberg@mac.com'}, booking_id=None
    - id=eccf7a63-105c-4f7f-9cd1-d9bfba9fa3c8, table_name=bookings, record_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914, change_type=INSERT, direction=out, processed=False, created_at=2025-06-02 22:51:38.834777+02:00, operation=INSERT, payload={'id': '66143b52-dc79-448c-a6a9-ad4c6f6d7914', 'end_time': '2025-06-03T08:10:00+02:00', 'metadata': {'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'subject': 'FaceTime-möte: Daniel | Test AB & Daniel | Kinnekulle Ledningsrådgivning AB', 'location': 'FaceTime', 'last_name': 'Källberg', 'first_name': 'Daniel', 'ip_address': '172.226.49.36:49063', 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'facetime:070956145345', 'body_preview': '<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\r\n</head>\r\n<body>\r\nDetta är en inbjudan till möte: FaceTime-möte: Daniel | Test AB &amp; Daniel | Kinnekulle Ledningsrådgivning AB\r\n</body>\r\n</html>\r\n', 'meeting_length': 10, 'calendar_response_status': 'none'}, 'contact_id': '1138f1b8-d247-4bb8-b9a1-57340b6da8ff', 'created_at': '2025-06-02T22:50:37.228+02:00', 'start_time': '2025-06-03T08:00:00+02:00', 'updated_at': '2025-06-02T22:50:37.228+02:00', 'meeting_type': 'facetime', 'booking_email': 'daniel.kallberg@mac.com'}, booking_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914
    - id=50aae37f-6a4b-4cd3-83b8-bf18a865227b, table_name=bookings, record_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914, change_type=INSERT, direction=out, processed=False, created_at=2025-06-02 22:51:38.834777+02:00, operation=INSERT, payload={'id': '66143b52-dc79-448c-a6a9-ad4c6f6d7914', 'end_time': '2025-06-03T08:10:00+02:00', 'metadata': {'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'subject': 'FaceTime-möte: Daniel | Test AB & Daniel | Kinnekulle Ledningsrådgivning AB', 'location': 'FaceTime', 'last_name': 'Källberg', 'first_name': 'Daniel', 'ip_address': '172.226.49.36:49063', 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.5 Safari/605.1.15', 'online_link': 'facetime:070956145345', 'body_preview': '<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\r\n</head>\r\n<body>\r\nDetta är en inbjudan till möte: FaceTime-möte: Daniel | Test AB &amp; Daniel | Kinnekulle Ledningsrådgivning AB\r\n</body>\r\n</html>\r\n', 'meeting_length': 10, 'calendar_response_status': 'none'}, 'contact_id': '1138f1b8-d247-4bb8-b9a1-57340b6da8ff', 'created_at': '2025-06-02T22:50:37.228+02:00', 'start_time': '2025-06-03T08:00:00+02:00', 'updated_at': '2025-06-02T22:50:37.228+02:00', 'meeting_type': 'facetime', 'booking_email': 'daniel.kallberg@mac.com'}, booking_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914

📁 Tabell: event_log
  • record_id (uuid)
  • received_at (timestamp with time zone)
  • timestamp (timestamp with time zone)
  • booking_id (uuid)
  • id (uuid)
  • payload (jsonb)
  • table_name (text)
  • event_type (text)
  • source (text)
  • action (text)
  📐 Kolumntyper:
    - record_id: uuid
    - received_at: timestamp with time zone
    - timestamp: timestamp with time zone
    - booking_id: uuid
    - id: uuid
    - payload: jsonb
    - table_name: text
    - event_type: text
    - source: text
    - action: text
  🔑 [p] event_log_pkey: PRIMARY KEY (id)
  🔗 Relationer:
  ⚙️ Triggers:
  🧪 Exempelrader:
    - source=None, event_type=None, payload=None, received_at=2025-06-02 22:51:38.761446+02:00, id=bf18a343-98f4-41ba-8aef-d004d928082c, table_name=contact, record_id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, action=INSERT, timestamp=2025-06-02 22:51:38.761446+02:00, booking_id=None
    - source=None, event_type=None, payload=None, received_at=2025-06-02 22:51:38.761446+02:00, id=aff22700-0c2f-468b-b668-fffce6e976ee, table_name=contact, record_id=1138f1b8-d247-4bb8-b9a1-57340b6da8ff, action=INSERT, timestamp=2025-06-02 22:51:38.761446+02:00, booking_id=None
    - source=sync, event_type=insert_contact, payload={'id': '1138f1b8-d247-4bb8-b9a1-57340b6da8ff', 'email': 'daniel.kallberg@mac.com', 'metadata': {'phone': '070956145345', 'origin': 'klrab.se', 'company': 'Test AB', 'last_name': 'Källberg', 'first_name': 'Daniel'}, 'created_at': '2025-06-02T20:50:24.084981+00:00', 'updated_at': '2025-06-02T20:50:24.084981+00:00', 'booking_email': 'daniel.kallberg@mac.com'}, received_at=2025-06-02 22:51:38.761446+02:00, id=1bfe1832-7861-4b8a-9efd-9577db9c9591, table_name=None, record_id=None, action=None, timestamp=2025-06-02 22:51:38.761446+02:00, booking_id=None
    - source=None, event_type=None, payload=None, received_at=2025-06-02 22:51:38.834777+02:00, id=1192420b-3826-4726-875b-c24ae9233de2, table_name=bookings, record_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914, action=INSERT, timestamp=2025-06-02 22:51:38.834777+02:00, booking_id=None
    - source=None, event_type=None, payload=None, received_at=2025-06-02 22:51:38.834777+02:00, id=9f4d9915-396a-4554-b80a-50426c071779, table_name=bookings, record_id=66143b52-dc79-448c-a6a9-ad4c6f6d7914, action=INSERT, timestamp=2025-06-02 22:51:38.834777+02:00, booking_id=None

