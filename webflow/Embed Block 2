<script>
  let lastValidatedEmail = '';
  let lastValidatedMeetingType = '';

  function getSelectedMeetingType() {
    const selected = document.querySelector('input[name="meeting_type"]:checked');
    return selected ? selected.value : '';
  }

  async function validateAndRenderCustomerFields() {
    console.log('🔥 validateCustomerContact() har anropats!');
    console.log('🚩 validateAndRenderCustomerFields() körs...');
    // Get email and meeting type
    const emailEl = document.getElementById('booking_email');
    const email = emailEl ? emailEl.value.trim() : '';
    const meeting_type = getSelectedMeetingType();
    console.log('📨 email:', email);
    console.log('📍 meeting_type:', meeting_type);
    console.log('📧 full emailEl.value:', emailEl ? emailEl.value : '(saknas)');

    if (!email || !email.includes('@')) {
      console.warn('⚠️ Ogiltig e-post:', email);
      return;
    }
    if (!meeting_type) {
      console.warn('⚠️ Mötestyp saknas.');
      return;
    }

    // Call /api/validate_contact
    let response;
    try {
      response = await fetch('/api/validate_contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, meeting_type })
      });
    } catch (e) {
      // Optionally handle error
      return;
    }
    if (!response.ok) {
      // Optionally handle error
      return;
    }
    let result;
    try {
      result = await response.json();
    } catch (e) {
      return;
    }

    const missingFields = result.missing_fields || [];
    // Fallback for atClient: if undefined, infer from meeting_type
    const isAtClient = meeting_type === 'atclient';
    const atClient = result.hasOwnProperty('atClient') ? !!result.atClient : isAtClient;
    console.log('✅ API-svar:', result);
    console.log('📌 Mötestyp:', meeting_type);
    console.log('📌 missing_fields:', missingFields);
    console.log('📌 atClient:', atClient);

    // All fields that could be shown/hidden
    const allFields = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'];
    // If atClient is false, hide address fields
    const addressFields = ['address', 'postal_code', 'city', 'country'];

    allFields.forEach(field => {
      const el = document.getElementById(field);
      if (!el) return;
      // Hide address fields if atClient is false
      if (addressFields.includes(field) && !atClient) {
        el.closest('.form-group') ? el.closest('.form-group').style.display = 'none' : el.style.display = 'none';
        return;
      }
      // Show field if missing, hide if not missing
      if (missingFields.includes(field)) {
        el.closest('.form-group') ? el.closest('.form-group').style.display = '' : el.style.display = '';
      } else {
        el.closest('.form-group') ? el.closest('.form-group').style.display = 'none' : el.style.display = 'none';
      }
    });
  }

  window.validateCustomerContact = validateAndRenderCustomerFields;
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
  console.log('✅ DOMContentLoaded körs och checkAndValidate() är aktiv');
  const emailEl = document.getElementById('booking_email');
  if (!emailEl) return;

  function checkAndValidate() {
    const email = emailEl.value.trim();
    setTimeout(() => {
      const meetingType = getSelectedMeetingType();
      const isValidEmail = email.length > 0 && email.includes('@');
      if (isValidEmail && meetingType) {
        if (
          email.toLowerCase() === lastValidatedEmail.toLowerCase() &&
          meetingType === lastValidatedMeetingType
        ) return;
        lastValidatedEmail = email;
        lastValidatedMeetingType = meetingType;
        console.log('🚀 Validering körs med:', { email, meetingType });
        validateCustomerContact();
      }
    }, 0);
  }

  emailEl.addEventListener('input', checkAndValidate);
  document.querySelectorAll('input[name="meeting_type"]').forEach(radio => {
    radio.addEventListener('change', checkAndValidate);
  });
});
</script>