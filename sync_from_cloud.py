import psycopg2
import json
from config import LOCAL_DB_CONFIG

def connect_db(config):
    return psycopg2.connect(**config)

def apply_change(cur, table, operation, payload):
    if operation == "INSERT":
        cols = ", ".join(payload.keys())
        placeholders = ", ".join(["%s"] * len(payload))
        sql = f"INSERT INTO {table} ({cols}) VALUES ({placeholders}) ON CONFLICT (id) DO NOTHING"
        cur.execute(sql, [json.dumps(v) if isinstance(v, dict) else v for v in payload.values()])
    elif operation == "UPDATE":
        if table == "contact" and "metadata" in payload:
            cur.execute(f"SELECT metadata FROM {table} WHERE id = %s", (payload["id"],))
            row = cur.fetchone()
            if row and row[0]:
                existing_metadata = row[0] if isinstance(row[0], dict) else json.loads(row[0])
                incoming_metadata = payload["metadata"] if isinstance(payload["metadata"], dict) else json.loads(payload["metadata"])
                existing_metadata.update(incoming_metadata)
                payload["metadata"] = existing_metadata
        sets = ", ".join([f"{col} = %s" for col in payload if col != "id"])
        values = [json.dumps(payload[col]) if isinstance(payload[col], dict) else payload[col] for col in payload if col != "id"]
        values.append(payload["id"])
        sql = f"UPDATE {table} SET {sets} WHERE id = %s"
        cur.execute(sql, values)
    elif operation == "DELETE":
        sql = f"DELETE FROM {table} WHERE id = %s"
        cur.execute(sql, [payload["id"]])

def sync():
    print("üîó Ansluter till remote databasen...")
    remote_conn = connect_db(LOCAL_DB_CONFIG)
    remote_cur = remote_conn.cursor()

    print("üîó Ansluter till lokal databasen...")
    local_conn = connect_db(LOCAL_DB_CONFIG)
    local_cur = local_conn.cursor()

    print("üì• H√§mtar pending_changes fr√•n remote...")
    remote_cur.execute("""
        SELECT id, table_name, operation, payload
        FROM pending_changes
        WHERE direction = 'in' AND processed = false
        ORDER BY created_at ASC
    """)

    rows = remote_cur.fetchall()
    print(f"üìä Totalt {len(rows)} √§ndringar att synka.")
    count = 0
    for row in rows:
        change_id, table, operation, payload_json = row
        try:
            payload = payload_json if isinstance(payload_json, dict) else json.loads(payload_json)
            print(f"üîÑ Behandlar: table={table}, operation={operation}, id={payload.get('id')}")
            # Skippa om ID √§r ogiltig UUID-str√§ng
            if not isinstance(payload.get("id"), str) or "your-generated-id" in payload.get("id"):
                print(f"‚è≠ Hoppar √∂ver ogiltig ID: {payload.get('id')}")
                continue
            apply_change(local_cur, table, operation, payload)
            print(f"‚úÖ Utf√∂rde {operation} p√• {table}.")
            if table == "bookings" and operation == "INSERT":
                pass  # Notis borttagen
            local_cur.execute("""
                INSERT INTO event_log (id, source, event_type, payload, received_at)
                VALUES (gen_random_uuid(), %s, %s, %s, now())
            """, ('sync', f"{operation.lower()}_{table}", json.dumps(payload)))
            remote_cur.execute("UPDATE pending_changes SET processed = true WHERE id = %s", [change_id])
            print(f"‚úÖ Synkade: {operation} p√• {table}")
            count += 1
        except Exception as e:
            print(f"‚ùå Fel vid synk f√∂r {table}: {e}")
            continue

    print("üíæ Sparar √§ndringar i lokal databas...")
    local_conn.commit()
    print("üíæ Sparar √§ndringar i remote databas...")
    remote_conn.commit()

    print("üîí St√§nger databasanslutningar...")
    local_cur.close()
    remote_cur.close()
    local_conn.close()
    remote_conn.close()
    print("üöÄ Sync klar.")
    print(f"‚úÖ Totalt {count} √§ndring(ar) importerades fr√•n molnet.")

if __name__ == "__main__":
    sync()