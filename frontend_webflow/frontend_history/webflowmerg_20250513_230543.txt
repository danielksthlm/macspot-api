START: Embed Block 1.js
<script>
  // √Öterst√§ller formul√§rstate (m√∂testyp, m√∂testid, tider, clt_ready)
  function resetFormState() {
    console.log('üîÑ √Öterst√§ller formul√§rstate');
    const fieldsToClear = [
      'clt_meetingtype',
      'clt_meetinglength',
      'clt_ready'
    ];
    fieldsToClear.forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = '';
    });

    const meetingRadios = document.querySelectorAll('input[name="meeting_type"]');
    meetingRadios.forEach(r => r.checked = false);
    const lengthRadios = document.querySelectorAll('input[name="meeting_length"]');
    lengthRadios.forEach(r => r.checked = false);

    const slotContainer = document.getElementById('time_slot_select');
    if (slotContainer) slotContainer.innerHTML = '';
    const slotGroup = document.getElementById('time_slot_group');
    if (slotGroup) slotGroup.style.display = 'none';
  }

  // Kontrollerar e-post och triggar laddning av m√∂testyper och validering.
  function validateEmail() {
    console.log('üîé validateEmail() k√∂rs');
    const emailEl = document.querySelector('#booking_email');
    const email = emailEl ? emailEl.value.trim() : '';
    const cltEmail = document.getElementById('clt_email');
    if (cltEmail) {
      cltEmail.value = email;
      console.log('üì• Satt #clt_email:', email);
    }
    if (email.length > 0 && email.includes('@')) {
      loadMeetingTypes();
      resetFormState();
      // L√§gg till logg direkt efter anropet
      console.log('üß™ Validering och m√∂testyper triggat, v√§ntar p√• meeting_type_select');
      const typeGroup = document.getElementById('meeting_type_group');
      if (typeGroup) {
        typeGroup.style.display = 'block';
        console.log('‚úÖ Visar #meeting_type_group via style.display');
      }
    } else {
      console.log('‚ùå Ogiltig e-post, laddar inte m√∂testyper');
    }
  }

  // Laddar m√∂testyper och l√§ngder fr√•n backend och renderar radioknappar.
  async function loadMeetingTypes() {
    console.log('üîé loadMeetingTypes() k√∂rs');
    try {
      const res = await fetch('https://macspotbackend.azurewebsites.net/api/meeting_types');
      if (!res.ok) throw new Error('Failed to fetch meeting types');
      const { types, lengths: loadedLengths } = await res.json();
      window.lengths = loadedLengths || {};
      console.log('üì° H√§mtade m√∂testyper och l√§ngder:', types, window.lengths);
      console.log('üìä M√∂testyper:', types);
      console.log('üìä L√§ngder per typ:', window.lengths);

      const container = document.getElementById('meeting_type_select');
      if (!container) {
        console.warn('‚ö†Ô∏è #meeting_type_select saknas i DOM');
        return;
      }
      container.innerHTML = '';

      function createRadio({ name, value, label, checked, onChange }) {
        const div = document.createElement('div');
        div.className = 'radio-button-items';
        const labelEl = document.createElement('label');
        labelEl.className = 'radio-button-items';
        const input = document.createElement('input');
        input.type = 'radio';
        input.name = name;
        input.value = value;
        input.className = 'radio-button-items';
        // Ingen radioknapp ska f√∂rv√§ljas eller klickas automatiskt
        if (typeof onChange === 'function') input.addEventListener('change', onChange);
        labelEl.appendChild(input);
        const text = document.createElement('span');
        text.textContent = ` ${label}`;
        text.style.display = 'block';
        text.style.marginLeft = '10px';
        text.style.marginTop = '-20px';
        text.style.lineHeight = '1.4';
        text.style.paddingLeft = '8px';
        labelEl.appendChild(text);
        div.appendChild(labelEl);
        return div;
      }

      (Array.isArray(types) ? types : JSON.parse(types)).forEach((type, index) => {
        const value = type.toLowerCase();
        const displayNames = {
          zoom: 'Digitalt via Zoom',
          facetime: 'Digitalt via FaceTime',
          teams: 'Digitalt via Teams',
          atclient: 'M√∂te hos dig (ange din adress)',
          atoffice: 'M√∂te p√• mitt kontor i Stockholm'
        };
        const label = displayNames[value] || type;
        const radio = createRadio({
          name: 'meeting_type',
          value,
          label,
          checked: false,
          onChange: () => {
            console.log('üîÑ M√∂testyp √§ndrad till:', value);
            renderMeetingLengths(value);
            validateAndRenderCustomerFields();
          }
        });
        container.appendChild(radio);
      });

      const renderedRadios = container.querySelectorAll('input[name="meeting_type"]');
      if (renderedRadios.length === 0) {
        console.warn('‚ö†Ô∏è Inga m√∂testyper renderades ‚Äì kontrollera types-data');
      }

      const typeGroup = document.getElementById('meeting_type_group');
      if (typeGroup) {
        typeGroup.classList.remove('hidden');
        typeGroup.classList.add('visible-group');
        console.log('‚úÖ Visar #meeting_type_group');
      }

    } catch (err) {
      console.error('‚ùå Error loading meeting types:', err);
      const container = document.getElementById('meeting_type_group');
      if (container) {
        container.innerHTML = '<p style="color: red;">Kunde inte ladda m√∂testyper - skyll inte p√• mig utan p√• Bill Gates.</p>';
      }
    }
  }

  // Renderar l√§ngdalternativ beroende p√• m√∂testyp.
  function renderMeetingLengths(type) {
    console.log('üîé renderMeetingLengths() k√∂rs f√∂r typ:', type);
    const slotContainer = document.getElementById('time_slot_select');
    if (!slotContainer) {
      console.warn('‚ö†Ô∏è #time_slot_select saknas i DOM');
      return;
    }
    slotContainer.innerHTML = '';
    const values = (window.lengths && window.lengths[type]) ? window.lengths[type] : [90];
    console.log(`‚è± Renderar ${values.length} tider f√∂r ${type}`);

    function createLengthRadio(value, checked) {
      const div = document.createElement('div');
      div.className = 'radio-button-items';
      const labelEl = document.createElement('label');
      labelEl.className = 'radio-button-items';
      const input = document.createElement('input');
      input.type = 'radio';
      input.name = 'meeting_length';
      input.value = value;
      input.className = 'radio-button-items';
      if (checked) input.checked = true;
      input.addEventListener('change', () => {
        console.log('üîÑ M√∂tesl√§ngd √§ndrad till:', value);
        const cltMeetingLength = document.getElementById('clt_meetinglength');
        if (cltMeetingLength) {
          cltMeetingLength.value = value;
          console.log('üì• Satt #clt_meetinglength:', value);
        }
        validateAndRenderCustomerFields();
      });
      labelEl.appendChild(input);
      const span = document.createElement('span');
      span.textContent = ` ${value} min`;
      span.className = 'radio-label-text';
      labelEl.appendChild(span);
      div.appendChild(labelEl);
      return div;
    }

    values.forEach((value, idx) => {
      slotContainer.appendChild(createLengthRadio(value, false));
    });

    const wrapper = document.getElementById('time_slot_group');
    if (wrapper) wrapper.classList.add('visible-group');

    const slotGroup = document.getElementById('time_slot_group');
    if (slotGroup) {
      slotGroup.classList.remove('hidden');
      slotGroup.classList.add('visible-group');
      console.log('‚úÖ Visar #time_slot_group');
      slotGroup.style.display = 'block';
      console.log('‚úÖ Visar #time_slot_group via style.display');
    }

  }

  // Validerar kontaktuppgifter mot backend och renderar n√∂dv√§ndiga kontaktf√§lt.
  async function validateAndRenderCustomerFields() {
    // D√∂ljer alltid submit-knappen i b√∂rjan av valideringen
    const submitButton = document.getElementById('contact-update-button');
    if (submitButton) submitButton.style.display = 'none';
    console.log('üîé validateAndRenderCustomerFields() k√∂rs');
    const emailEl = document.querySelector('#booking_email');
    const email = emailEl ? emailEl.value.trim() : '';
    const meetingTypeEl = document.querySelector('input[name="meeting_type"]:checked');
    const meetingType = meetingTypeEl ? meetingTypeEl.value : '';
    const meetingLengthEl = document.querySelector('input[name="meeting_length"]:checked');
    const meetingLength = meetingLengthEl ? meetingLengthEl.value : '';

    const cltEmail = document.getElementById('clt_email');
    const cltMeetingType = document.getElementById('clt_meetingtype');
    const cltMeetingLength = document.getElementById('clt_meetinglength');
    const cltReady = document.getElementById('clt_ready');

    const addressField = document.querySelector('#address_fields');
    if (!addressField) {
      console.warn('‚ö†Ô∏è #address_fields hittades inte i DOM');
    }

    // L√§gg till guard f√∂r att v√§nta p√• m√∂testyp och m√∂testid innan validering av namn
    if (!meetingType || !meetingLength) {
      console.log('‚è≥ V√§ntar p√• m√∂testyp och m√∂testid innan validering av namn');
      return;
    }

    // S√§tt dolda f√§lt
    if (cltEmail) {
      cltEmail.value = email;
      console.log('üì• Satt #clt_email:', email);
    }
    if (cltMeetingType) {
      cltMeetingType.value = meetingType;
      console.log('üì• Satt #clt_meetingtype:', meetingType);
    }
    if (cltMeetingLength) {
      cltMeetingLength.value = meetingLength;
      console.log('üì• Satt #clt_meetinglength:', meetingLength);
    }

    // Om email eller m√∂testyp saknas, g√∂m f√§lt och knapp
    if (!email || !meetingType) {
      console.log('‚ö†Ô∏è E-post eller m√∂testyp saknas, g√∂mmer f√§lt och knapp');
      const allFields = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'].map(id => document.getElementById(id)).filter(Boolean);
      allFields.forEach(f => {
        f.classList.add('hidden');
        f.classList.remove('needs-filling');
      });
      if (addressField) addressField.classList.add('hidden');
      if (submitButton) submitButton.style.display = 'none';
      if (cltReady) cltReady.value = 'false';
      return;
    }

    try {
      const url = 'https://macspotbackend.azurewebsites.net/api/validate_contact';
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, meeting_type: meetingType })
      });
      console.log('üì° validate_contact status:', response.status);
      if (!response.ok) throw new Error('Failed to validate contact');
      const data = await response.json();
      console.log('‚úÖ API JSON:', data);

      const allFieldIds = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'];
      const fieldLabels = {
        first_name: 'F√∂rnamn',
        last_name: 'Efternamn',
        phone: 'Telefonnummer',
        company: 'F√∂retag',
        address: 'Gatuadress',
        postal_code: 'Postnummer',
        city: 'Stad',
        country: 'Land'
      };
      const allFields = allFieldIds.map(id => document.getElementById(id)).filter(Boolean);
      const missingFieldsContainer = document.getElementById('missing_fields_messages');
      if (missingFieldsContainer) missingFieldsContainer.innerHTML = '';

      // B√∂rja med att d√∂lja alla f√§lt och #address_fields
      allFields.forEach(f => {
        f.classList.add('hidden');
        f.classList.remove('needs-filling');
        f.style.display = 'none';
      });
      if (addressField) addressField.style.display = 'none';

      // Visa alltid dessa f√§lt om kunden √§r ny eller har missing_fields
      const alwaysShow = ['first_name', 'last_name', 'phone', 'company'];
      allFields.forEach(input => {
        const fieldName = input.id;
        const isAddressField = ['address', 'postal_code', 'city', 'country'].includes(fieldName);
        const shouldShow = data.status === 'new_customer' && alwaysShow.includes(fieldName);
        const isMissing = data.missing_fields && data.missing_fields.includes(fieldName);
        const showField = shouldShow || isMissing;

        if (showField) {
          input.classList.remove('hidden');
          input.classList.add('needs-filling');
          input.style.display = 'block';
          if (missingFieldsContainer && isMissing) {
            const p = document.createElement('p');
            p.className = 'missing-field-message';
            p.textContent = `Saknat f√§lt: ${fieldLabels[fieldName] || fieldName}`;
            missingFieldsContainer.appendChild(p);
          }
        }
      });

      // Visa #address_fields om meetingType === 'atclient' och (ny kund eller n√•gon adress i missing_fields)
      const addressFieldIds = ['address', 'postal_code', 'city', 'country'];
      const addressRequired =
        meetingType === 'atclient' &&
        (
          data.status === 'new_customer' ||
          (data.missing_fields && addressFieldIds.some(id => data.missing_fields.includes(id)))
        );

      if (addressRequired && addressField) {
        addressField.style.display = 'block';
        console.log('‚úÖ Visar #address_fields pga atclient + ny kund eller missing_fields');
      }

      // Visa knapp baserat p√• status och om alla synliga f√§lt √§r ifyllda
      if (submitButton) {
        if (data.status === 'new_customer') {
          submitButton.style.display = 'block';
          submitButton.textContent = 'Skapa';
          console.log('üÜï Ny kund ‚Äì visa "Skapa" knapp');
        } else if (data.status === 'existing_customer' && data.missing_fields.length > 0) {
          submitButton.style.display = 'block';
          submitButton.textContent = 'Uppdatera';
          console.log('‚úèÔ∏è Befintlig kund med saknade f√§lt ‚Äì visa "Uppdatera" knapp');
        } else {
          submitButton.style.display = 'none';
          console.log('‚úÖ Befintlig kund komplett ‚Äì g√∂m knapp');
        }
      }

      // Kontrollera att alla dolda f√§lt √§r ifyllda
      const allCltFieldsFilled =
        cltEmail && cltEmail.value.trim() &&
        cltMeetingType && cltMeetingType.value.trim() &&
        cltMeetingLength && cltMeetingLength.value.trim();

      // Kontrollera att alla synliga kontaktf√§lt √§r ifyllda
      // Anv√§nd getComputedStyle f√∂r att s√§kert avg√∂ra synlighet
      const visibleInputs = allFields.filter(el => el && window.getComputedStyle(el).display !== 'none');
      const allVisibleContactFieldsFilled = visibleInputs.every(input => input.value.trim());
      // Logga varje synligt inputf√§lt och dess trimmade v√§rde
      visibleInputs.forEach(input => {
        console.log(`üîç Synligt f√§lt: #${input.id} = "${input.value.trim()}"`);
      });

      if (allCltFieldsFilled && allVisibleContactFieldsFilled) {
        if (cltReady) {
          cltReady.value = 'true';
          // S√§tt window.formState s√• att det alltid finns vid knapptryckning
          window.formState = {
            email,
            meeting_type: meetingType,
            meeting_length: parseInt(meetingLength, 10),
            metadata: {
              first_name: document.getElementById('first_name')?.value || '',
              last_name: document.getElementById('last_name')?.value || '',
              phone: document.getElementById('phone')?.value || '',
              company: document.getElementById('company')?.value || '',
              address: document.getElementById('address')?.value || '',
              postal_code: document.getElementById('postal_code')?.value || '',
              city: document.getElementById('city')?.value || '',
              country: document.getElementById('country')?.value || ''
            }
          };
          console.log('‚úÖ formState satt:', window.formState);
          console.log('‚úÖ Alla kund- och kontaktf√§lt ifyllda, satt #clt_ready = true');
          // KOPPLAR Block 1 till Block 2: initiera slot-fetch om funktionen finns
          if (window.initAvailableSlotFetch) {
            window.initAvailableSlotFetch();
            console.log('üì° initAvailableSlotFetch() anropad fr√•n Block 1');
          } else {
            console.warn('‚ö†Ô∏è initAvailableSlotFetch() saknas ‚Äì se till att Block 2 √§r laddad');
            setTimeout(() => {
              if (window.initAvailableSlotFetch) {
                window.initAvailableSlotFetch();
                console.log('üì° initAvailableSlotFetch() k√∂rdes via fallback');
              } else {
                console.warn('‚ùå initAvailableSlotFetch() saknas fortfarande efter timeout');
              }
            }, 500);
          }
        }
      } else {
        if (cltReady) {
          cltReady.value = 'false';
          console.log('‚ö†Ô∏è Saknas ifyllda kontaktf√§lt, satt #clt_ready = false');
        }
      }

    } catch (err) {
      console.error('‚ùå Fel vid validering av kontakt:', err);
    }
  }

  // Kontrollera att validateEmail() kopplas vid input
  document.addEventListener('DOMContentLoaded', () => {
    const emailEl = document.querySelector('#booking_email');
    if (emailEl) {
      emailEl.addEventListener('input', validateEmail);
      console.log('‚úÖ Lyssnare p√• #booking_email aktiverad');
    } else {
      console.warn('‚ö†Ô∏è #booking_email hittades inte vid DOMContentLoaded');
    }
    // L√§gg till lyssnare p√• alla kontaktf√§lt s√• att validateAndRenderCustomerFields() k√∂rs vid input
    [
      'first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'
    ].forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.addEventListener('input', () => {
          validateAndRenderCustomerFields();
        });
      }
    });
    console.log('‚úÖ Lyssnare p√• kontaktf√§lt aktiverad');
    // G√∂m alltid kontaktknappen initialt vid sidladdning
    const submitButton = document.getElementById('contact-update-button');
    if (submitButton) {
      submitButton.style.display = 'none';
      submitButton.textContent = '';
      console.log('üö´ G√∂mmer kontaktknapp vid sidladdning och nollst√§ller text');
    }

    // L√§gg till click-lyssnare p√• #contact-update-button som POSTar till /validate_contact (write_if_valid)
    if (submitButton) {
      submitButton.addEventListener('click', async (e) => {
        // --- DEBUGLOGGAR: visar exakt vad som finns tillg√§ngligt vid klicktillf√§llet ---
        console.log('üß™ Knappklick mottaget.');
        console.log('üß™ Knappetikett:', submitButton.textContent);
        console.log('üß™ window.formState:', window.formState);
        // L√§gg till loggning av varje relevant f√§lt:
        ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'].forEach(id => {
          const el = document.getElementById(id);
          console.log(`üß™ ${id}:`, el?.value || '(tomt)');
        });
        console.log('üß™ clt_ready:', document.getElementById('clt_ready')?.value);
        // -------------------------------------------------------------------------------
        e.preventDefault();
        if (!window.formState || !['Skapa', 'Uppdatera'].includes(submitButton.textContent)) {
          return;
        }

        const body = {
          email: window.formState.email,
          meeting_type: window.formState.meeting_type,
          metadata: window.formState.metadata,
          write_if_valid: true
        };

        try {
          console.log('üì§ Skickar kontaktdata till /validate_contact (write_if_valid)', body);
          const res = await fetch('https://macspotbackend.azurewebsites.net/api/validate_contact', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          });
          const result = await res.json();
          console.log('‚úÖ Kontaktdata sparad via validate_contact:', result);
        } catch (err) {
          console.error('‚ùå Misslyckades spara kontaktdata:', err);
        }
      });
    }
  });
</script>
END: Embed Block 1.js

START: Embed Block 2.js
<script>
window.initAvailableSlotFetch = function() {
  const cltReady = document.getElementById('clt_ready')?.value;
  if (cltReady !== 'true' || !window.formState) {
    console.warn('‚ùå Kan inte h√§mta tillg√§ngliga tider ‚Äì formState eller clt_ready saknas');
    return;
  }

  console.log('üì° H√§mtar tillg√§ngliga tider f√∂r:', window.formState);

  fetch('https://macspotbackend.azurewebsites.net/api/getavailableslots', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      email: window.formState.email,
      meeting_type: window.formState.meeting_type,
      meeting_length: window.formState.meeting_length
    })
  })
  .then(res => res.json())
  .then(data => {
    console.log('üß™ R√•tt slotData fr√•n API:', data);
    if (Array.isArray(data.slots)) {
      const grouped = {};
      data.slots.forEach(slot => {
        const localDate = new Date(slot.slot_iso);
        const localYear = localDate.getFullYear();
        const localMonth = String(localDate.getMonth() + 1).padStart(2, '0');
        const localDay = String(localDate.getDate()).padStart(2, '0');
        const date = `${localYear}-${localMonth}-${localDay}`;
        const time = localDate.toTimeString().slice(0, 5);
        if (!grouped[date]) grouped[date] = [];
        grouped[date].push(time);
      });
      console.log('üì¶ Skickar grouped slots till setAvailableSlots:', grouped);
      if (typeof window.setAvailableSlots === 'function') {
        window.setAvailableSlots(grouped);
      } else {
        console.warn('‚ö†Ô∏è setAvailableSlots() saknas ‚Äì kontrollera att kalendermodul √§r laddad');
      }
    } else {
      console.warn('‚ö†Ô∏è Ogiltigt slotData-format:', data);
    }
  })
  .catch(err => {
    console.error('‚ùå Fetch error in getavailableslots:', err.message || err);
    alert('Fel vid h√§mtning av tider. Kontrollera din internetanslutning eller att servern √§r tillg√§nglig.');
  });
};
</script>
END: Embed Block 2.js

START: Embed Block 2b.js
<script>
  window.getISOWeek = function(date) {
    const tempDate = new Date(date.getTime());
    tempDate.setHours(0, 0, 0, 0);
    tempDate.setDate(tempDate.getDate() + 3 - ((tempDate.getDay() + 6) % 7));
    const week1 = new Date(tempDate.getFullYear(), 0, 4);
    return 1 + Math.round(((tempDate.getTime() - week1.getTime()) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7);
  };

  window.CalendarModule = {
    // Hj√§lpfunktion: format YYYY-MM-DD
    formatDate: function(date) {
      return date.toLocaleDateString('sv-SE').replaceAll('.', '-');
    },

    highlightDate: function(selectedDayEl) {
      const calendarWrapper = document.getElementById('calendar_wrapper');
      const dayEls = calendarWrapper ? [document.getElementById('calendar_day')] : [];
      // Remove 'selected' from all Day elements by class
      const allDayEls = calendarWrapper ? calendarWrapper.querySelectorAll('.day') : [];
      allDayEls.forEach(el => {
        el.classList.remove('selected');
      });
      selectedDayEl.classList.add('selected');
      selectedDayEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
    },

    renderTimes: function(times, currentMonth) {
      const calendarTimes = document.getElementById('calendar_times');
      if (!calendarTimes) {
        console.warn('‚ö†Ô∏è calendar_times saknas ‚Äì renderTimes avbryts');
        return;
      }
      calendarTimes.style.display = 'block';
      calendarTimes.scrollIntoView({ behavior: 'smooth', block: 'start' });
      calendarTimes.innerHTML = '';
      const selectedDateEl = document.querySelector('.calendar-day.selected');
      if (selectedDateEl) {
        const selectedDay = selectedDateEl.textContent.padStart(2, '0');
        const year = currentMonth.getFullYear();
        const month = String(currentMonth.getMonth() + 1).padStart(2, '0');
        const date = new Date(`${year}-${month}-${selectedDay}`);
        const weekday = date.toLocaleDateString('sv-SE', { weekday: 'long' });
        const formatted = `${weekday.charAt(0).toUpperCase() + weekday.slice(1)} ${selectedDay} ${date.toLocaleDateString('sv-SE', { month: 'short' })}`;
        const label = document.createElement('div');
        label.textContent = `üìÖ ${formatted}`;
        calendarTimes.appendChild(label);
      }
      times.forEach(time => {
        const timeEl = document.createElement('button');
        timeEl.type = 'button';
        timeEl.className = 'time-slot';
        timeEl.textContent = time;
        timeEl.addEventListener('click', () => {
          const allTimes = calendarTimes.querySelectorAll('.time-slot');
          allTimes.forEach(t => t.classList.remove('selected'));
          timeEl.classList.add('selected');
          if (!window.formState) window.formState = {};
          const selectedDateEl = document.querySelector('.calendar-day.selected');
          if (selectedDateEl) {
            const selectedDay = selectedDateEl.textContent.padStart(2, '0');
            const year = currentMonth.getFullYear();
            const month = String(currentMonth.getMonth() + 1).padStart(2, '0');
            const dateIso = `${year}-${month}-${selectedDay}`;
            const isoTime = `${dateIso}T${time}:00.000Z`;
            window.formState.slot_iso = isoTime;
            const slotIsoEl = document.getElementById('clt_slot_iso');
            if (slotIsoEl) slotIsoEl.textContent = isoTime;
            const submitButton = document.getElementById('contact-update-button');
            if (submitButton) {
              submitButton.style.display = 'block';
              submitButton.textContent = 'Boka m√∂te';
            }
          }
          window.formState.meeting_time = time;
        });
        calendarTimes.appendChild(timeEl);
      });
    },

    renderCalendar: function(availableSlots, currentMonth) {
      // Add currentMonthKey at top of renderCalendar
      const currentMonthKey = currentMonth.getFullYear() + '-' + currentMonth.getMonth();
      const calendarWrapper = document.getElementById('calendar_wrapper');
      if (!calendarWrapper) return;


      // Preserve calendar_times before resetting innerHTML
      const calendarTimes = document.getElementById('calendar_times');
      const shouldRestoreTimes = !!calendarTimes;

      // Reset wrapper
      // calendarWrapper.innerHTML = '';

      // Hantera header manuellt i Webflow ‚Äì endast √•terst√§ll inneh√•ll om wrapper finns
      const existingHeaderWrapper = document.getElementById('calendar_header');
      if (existingHeaderWrapper) {
        existingHeaderWrapper.innerHTML = '';
        // Add optional dynamic header content here if needed
      }

      // --- Inserted: month/year label and arrow handlers ---
      const monthEl = document.getElementById('calendar_month');
      if (monthEl) {
        monthEl.textContent = currentMonth.toLocaleString('sv-SE', { month: 'long', year: 'numeric' });
      }

      // Flytta pilhantering till renderCalendar f√∂r att alltid binda korrekt
      const leftArrow = document.getElementById('cal_arrow_left');
      const rightArrow = document.getElementById('cal_arrow_right');
      if (leftArrow && rightArrow) {
        leftArrow.onclick = () => {
          const newMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1);
          window.CalendarModule.renderCalendar(availableSlots, newMonth);
        };
        rightArrow.onclick = () => {
          const newMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1);
          window.CalendarModule.renderCalendar(availableSlots, newMonth);
        };
        // G√∂r pilarna till "pointer" vid hover
        leftArrow.style.cursor = 'pointer';
        rightArrow.style.cursor = 'pointer';
      }
      if (monthEl) {
        monthEl.onclick = () => {
          const today = new Date();
          window.CalendarModule.renderCalendar(window.latestAvailableSlots, today);
        };
        monthEl.style.cursor = 'pointer';
      }
      // --- End inserted ---

      // Grid container
      const grid = document.getElementById('calendar_grid');
      if (!grid) {
        console.warn('‚ùå calendar_grid saknas i DOM');
        // Forts√§tt √§nd√• f√∂r fels√∂kning i Webflow
      }
      console.log('üß± B√∂rjar rendera kalendern...');
      console.log('üìÜ M√•nad:', currentMonth.toISOString());
      console.log('üì¶ availableSlots:', availableSlots);

      console.log('‚úÖ calendar_grid hittades i DOM:', grid);
      console.log('üì¶ calendar_grid innerHTML vid start:', grid.innerHTML.slice(0, 200));

      // Update existing .weeklabel elements instead of recreating header row
      const weekLabelEls = grid.querySelectorAll('.weeklabel');
      const weekNumberEls = grid.querySelectorAll('.weeknumber');
      const dayEls = grid.querySelectorAll('.day');
      console.log('üî¢ Antal .weeklabel:', weekLabelEls.length);
      console.log('üî¢ Antal .weeknumber:', weekNumberEls.length);
      console.log('üî¢ Antal .day:', dayEls.length);

      const labels = ['', 'M', 'T', 'O', 'T', 'F', 'L', 'S'];
      weekLabelEls.forEach((el, index) => {
        el.textContent = labels[index] || '';
      });

      // Date range setup
      const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
      const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
      const jsDay = firstDay.getDay();
      const startOffset = jsDay === 0 ? 6 : jsDay - 1;
      const totalDays = startOffset + lastDay.getDate();
      // Always show dynamic number of weeks based on days
      const numWeeks = Math.ceil((startOffset + lastDay.getDate()) / 7);

      if (!weekNumberEls.length) console.warn('‚ö†Ô∏è Inga .weeknumber-element hittades i DOM');
      if (!dayEls.length) console.warn('‚ö†Ô∏è Inga .day-element hittades i DOM');

      const maxDayElements = dayEls.length;

      let dayIndex = 0;
      for (let week = 0; week < numWeeks; week++) {
        const monday = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1 - startOffset + week * 7);
        const weekNumber = window.getISOWeek(monday);
        if (week < weekNumberEls.length) {
          weekNumberEls[week].textContent = 'v' + weekNumber;
        }

        for (let wd = 0; wd < 7; wd++) {
          const gridIndex = week * 7 + wd;
          if (dayIndex >= maxDayElements) {
            console.warn(`‚ö†Ô∏è Dagindex ${dayIndex} √∂verskrider antal .day-element (${maxDayElements})`);
            break;
          }
          const dayEl = dayEls[dayIndex];
          if (!dayEl) {
            console.warn(`‚ö†Ô∏è Saknar .day-element vid index ${dayIndex}`);
            continue;
          }
          const cellDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1 - startOffset + gridIndex);
          if (cellDate.getMonth() !== currentMonth.getMonth()) {
            dayEl.textContent = '';
            dayEl.removeAttribute('data-date');
            dayEl.classList.remove('today', 'available', 'selected');
            dayIndex++;
            continue;
          } else {
            const isoDate = window.CalendarModule.formatDate(cellDate);
            dayEl.textContent = cellDate.getDate();
            dayEl.dataset.date = isoDate;

            const isToday = cellDate.toDateString() === new Date().toDateString();
            dayEl.classList.toggle('today', isToday);

            const isAvailable = availableSlots[isoDate]?.length > 0;
            dayEl.classList.toggle('available', isAvailable);

            if (isAvailable) {
              dayEl.addEventListener('click', () => {
                window.CalendarModule.highlightDate(dayEl);
                window.CalendarModule.renderTimes(availableSlots[isoDate], currentMonth);
                window.userHasManuallySelectedDate = true;
              });

              if (
                !window.userHasManuallySelectedDate &&
                (!window.initialSlotRendered || window.lastRenderedMonth !== currentMonthKey)
              ) {
                window.initialSlotRendered = true;
                window.lastRenderedMonth = currentMonthKey;
                window.CalendarModule.highlightDate(dayEl);
                window.CalendarModule.renderTimes(availableSlots[isoDate], currentMonth);
              }
            }
            dayIndex++;
          }
        }
      }

      for (let i = numWeeks; i < weekNumberEls.length; i++) {
        weekNumberEls[i].textContent = '';
      }

      // T√∂m alla .day efter sista dayIndex
      for (let i = dayIndex; i < dayEls.length; i++) {
        const el = dayEls[i];
        el.textContent = '';
        el.removeAttribute('data-date');
        el.classList.remove('today', 'available', 'selected');
      }

      // Ta inte bort eller ers√§tt calendar_grid ‚Äì hanteras nu i Webflow

      if (shouldRestoreTimes && !calendarWrapper.contains(calendarTimes)) {
        calendarWrapper.appendChild(calendarTimes);
      }

      // calendarWrapper.scrollIntoView({ behavior: 'smooth', block: 'start' });

      console.log('‚úÖ Kalendern f√§rdigrenderad');
    }
  };

  window.setAvailableSlots = function(groupedSlots) {
    if (!window.CalendarModule || typeof window.CalendarModule.renderCalendar !== 'function') {
      return;
    }
    if (Object.keys(groupedSlots).length === 0) {
      return;
    }
    window.initialSlotRendered = false;
    window.latestAvailableSlots = groupedSlots;
    const firstAvailableDateStr = Object.keys(groupedSlots).sort()[0];
    const firstAvailableDate = new Date(firstAvailableDateStr);
    window.firstAvailableDate = firstAvailableDate;
    const monthLabel = document.getElementById('calendar_month');
    if (monthLabel) {
      monthLabel.textContent = firstAvailableDate.toLocaleString('sv-SE', { month: 'long', year: 'numeric' });
    }
    window.CalendarModule.renderCalendar(groupedSlots, firstAvailableDate);
    const wrapper = document.getElementById('calendar_wrapper');
    if (wrapper) {
      wrapper.style.display = 'flex';
    }
  };

  // V√§nta p√• att #calendar_wrapper laddas in i DOM
  let waitForCalendarWrapper2b = setInterval(() => {
    const calendarWrapper = document.getElementById('calendar_wrapper');
    if (calendarWrapper) {
      clearInterval(waitForCalendarWrapper2b);
      // Removed calendarWrapper.style.display = 'flex';
      // Insert the waitForCalendarGrid block here
      let waitForCalendarGrid = setInterval(() => {
        const grid = document.getElementById('calendar_grid');
        if (grid) {
          clearInterval(waitForCalendarGrid);
          console.log('‚úÖ calendar_grid hittades av waitForCalendarGrid');
          if (window.latestAvailableSlots && window.firstAvailableDate) {
            console.log('üß† Trigger renderCalendar fr√•n waitForCalendarGrid');
            window.CalendarModule.renderCalendar(window.latestAvailableSlots, window.firstAvailableDate);
          }
        } else {
          console.log('‚è≥ V√§ntar p√• calendar_grid...');
        }
      }, 100);
    }
  }, 100);
// --- Inserted CSS for today and available day styling ---
const calendarStyle = document.createElement('style');
calendarStyle.textContent = `
.day.today,
.day.available,
.day.available.selected {
  display: flex;
  width: 100%;
  height: 100%;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  align-items: center;
  justify-content: center;
}

.day.today {
  border: 1px solid #B2B2B2;
}

.day.available {
  background-color: #B2B2B2;
  color: #F5F5F5;
  cursor: pointer;
}

.day.available:hover {
  background-color: #e9a56f;
  color: #F5F5F5;
}

.day.available.selected {
  background-color: #e9a56f;
  color: #F5F5F5;
  border: 1px solid #B2B2B2;
}
`;
document.head.appendChild(calendarStyle);
</script>
END: Embed Block 2b.js

START: Embed Block 3.js
  // --- Block 3 ---
  // Denna kod hanterar vad som sker n√§r anv√§ndaren klickar p√• ‚ÄúBoka m√∂te‚Äù.
  // F√∂ruts√§ttning: Alla f√§lt (email, typ, l√§ngd, datum, tid) finns i formState.
  // Resultat: POST mot /api/book_meeting + visuell feedback.
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const submitButton = document.getElementById('contact-update-button');
    if (!submitButton) return;

    submitButton.onclick = async (event) => {
      event.preventDefault();
      if (!window.formState) {
        alert('‚ùó V√§nligen fyll i alla f√§lt f√∂rst.');
        return;
      }

      const {
        email,
        meeting_type,
        meeting_length,
        meeting_time,
        slot_iso,
        metadata
      } = window.formState;

      if (!metadata || Object.keys(metadata).length === 0) {
        alert('‚ùó V√§nligen fyll i kontaktuppgifter innan bokning.');
        submitButton.disabled = false;
        submitButton.textContent = 'Boka m√∂te';
        return;
      }

      if (!slot_iso) {
        alert('‚ùó V√§lj en tid i kalendern.');
        return;
      }

      submitButton.disabled = true;
      submitButton.textContent = 'Skickar...';

      try {
        const response = await fetch('https://macspotbackend.azurewebsites.net/api/book_meeting', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email,
            meeting_type,
            meeting_length,
            meeting_time,
            slot_iso,
            metadata
          })
        });

        const result = await response.json();
        if (!response.ok) throw new Error(result.message || 'Kunde inte boka.');

        const confirmationEl = document.getElementById('booking-status');
        if (confirmationEl) {
          confirmationEl.textContent = '‚úÖ Bokningen √§r genomf√∂rd!';
          confirmationEl.classList.add('booking-success');
          confirmationEl.classList.remove('booking-failed');

          // Rensa formState
          window.formState = {};

          // Alternativ visuell bekr√§ftelse ‚Äì scrolla till status eller visa popup
          confirmationEl.scrollIntoView({ behavior: 'smooth', block: 'center' });

          // H√§r kan √§ven redirect eller reload ske vid behov
          // setTimeout(() => location.reload(), 3000);
        }

        submitButton.textContent = 'Bokat!';
        submitButton.disabled = true;

      } catch (err) {
        console.error('‚ùå Bokningen misslyckades:', err);
        alert('‚ùå Ett fel uppstod. F√∂rs√∂k igen.');

        const confirmationEl = document.getElementById('booking-status');
        if (confirmationEl) {
          confirmationEl.textContent = '‚ùå Bokningen misslyckades ‚Äì f√∂rs√∂k igen.';
          confirmationEl.classList.add('booking-failed');
          confirmationEl.classList.remove('booking-success');
        }

        submitButton.disabled = false;
        submitButton.textContent = 'Boka m√∂te';
      }
    };
  });
</script>
END: Embed Block 3.js

