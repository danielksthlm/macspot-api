📂 KODTRÄD
==========
├── frontend_webflow
│   ├── embed_block_1_contact.js
│   ├── embed_block_2_calendar.js
│   ├── embed_block_3_booking.js
│   ├── embed_block_5_verify-message.py
│   ├── footer_block_4_verification.py
│   ├── styles_init.css
│   ├── tracker.js
│   ├── webflow_init.html
==========

====================
📄 Fil: frontend_webflow/webflow_init.html
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 📄 Okänt format
📅 Senast ändrad: 2025-05-24 20:44:48
📏 Antal rader: 61
🧩 Antal funktioner: 1
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 4 rader
🧠 Komplexitetspoäng: 4
🧪 TODO/FIXME: 0
====================
START: webflow_init.html
<script>
    window.MacSpotUtils = {
      getVal(sel) {
        const el = document.querySelector(sel);
        return el ? (el.type === 'radio' ? (el.checked ? el.value : '') : (typeof el.value === 'string' ? el.value.trim() : '')) : '';
      },
      setVal(sel, val) {
        const el = document.querySelector(sel);
        if (el) el.value = val;
      },
      toggle(id, visible = true) {
        const el = document.getElementById(id);
        if (!el) return;
        el.style.display = visible ? 'block' : 'none';
        el.style.visibility = visible ? 'visible' : 'hidden';
        el.style.opacity = visible ? '1' : '0';
        el.style.pointerEvents = visible ? 'auto' : 'none';
      },
      fetchJSON: async (url, body, method = 'GET') => {
        const noCacheUrl = url + (url.includes('?') ? '&' : '?') + '_t=' + Date.now();
        const res = await fetch('https://macspotbackend.azurewebsites.net' + noCacheUrl, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: body ? JSON.stringify(body) : undefined
        });
        if (!res.ok) throw new Error(await res.text());
        return await res.json();
      },
      createRadio(name, value, label, onChange) {
        const wrapper = document.createElement('div');
        wrapper.className = 'radio-button-items';

        const labelEl = document.createElement('label');
        labelEl.className = 'radio-label';

        const input = document.createElement('input');
        input.type = 'radio';
        input.name = name;
        input.value = value;
        input.className = 'radio-input';
        input.addEventListener('change', onChange);

        const span = document.createElement('span');
        span.textContent = label;
        span.className = 'radio-text';

        labelEl.appendChild(input);
        labelEl.appendChild(span);
        wrapper.appendChild(labelEl);

        return wrapper;
      },
      resetContactState() {
        ['#clt_ready', '#clt_meetingtype', '#clt_meetinglength', '#clt_contact_id'].forEach(sel => {
          const el = document.querySelector(sel);
          if (el) el.value = '';
        });
        console.log('🧪 clt_ready reset to empty string (from resetContactState)');
      }
    };
  </script>
END: webflow_init.html

====================
📄 Fil: frontend_webflow/embed_block_1_contact.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-25 11:20:51
📏 Antal rader: 344
🧩 Antal funktioner: 9
💬 Kommentarstäckning: 18 rader (5.2%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 63 rader
🧠 Komplexitetspoäng: 35
🧪 TODO/FIXME: 0
====================
START: embed_block_1_contact.js
<script>
  const METADATA_KEYS = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'];
  const ADDRESS_FIELD_IDS = ['address', 'postal_code', 'city', 'country'];
  const displayNames = {
    zoom: 'Digitalt via Zoom',
    facetime: 'Digitalt via FaceTime',
    teams: 'Digitalt via Teams',
    atclient: 'Möte hos dig (ange adress)',
    atoffice: 'Möte på mitt kontor i Stockholm'
  };
  let bookingSettings = null;

  document.addEventListener('DOMContentLoaded', async () => {
    bookingSettings = await MacSpotUtils.fetchJSON('/api/booking_settings');
    console.log('📦 SETTINGS:', bookingSettings);
    MacSpotUtils.setVal('#clt_ready', 'false');
    document.querySelector('#booking_email')?.addEventListener('input', onEmailInput);
    // (Removed: Ensure checkReady runs when any metadata field is typed in)
    // Also update MacSpotUtils.setVal for each metadata field on input, and sync DOM value
    METADATA_KEYS.forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.addEventListener('input', () => {
          MacSpotUtils.setVal(`#${id}`, el.value);
          // 💡 Uppdatera också el.value för att säkerställa att DOM är synkad
          el.setAttribute('value', el.value);
          checkReady();
        });
      }
    });
    // Removed live validateContact() on metadata field input to prevent overwrites while typing.
    // METADATA_KEYS.concat('clt_contact_id').forEach(id => {
    //   document.getElementById(id)?.addEventListener('input', validateContact);
    // });
    const contactButton = document.getElementById('contact-update-button');
    if (contactButton) {
      contactButton.addEventListener('click', submitContact);
    }

  });

  function onEmailInput() {
    MacSpotUtils.resetContactState();
    const email = MacSpotUtils.getVal('#booking_email');
    MacSpotUtils.setVal('#clt_email', email);
    checkTriggerValidateContact();
    if (!email.includes('@')) return;
    loadMeetingTypes();
  }

  async function loadMeetingTypes() {
    const { types, lengths } = await MacSpotUtils.fetchJSON('/api/meeting_types');
    window.lengths = Object.fromEntries(Object.entries(lengths).map(([k, v]) => [k.toLowerCase(), v]));
    const container = document.getElementById('meeting_type_select');
    container.innerHTML = '';
    types.forEach(type => {
      const value = type.toLowerCase();
      container.appendChild(MacSpotUtils.createRadio('meeting_type', value, displayNames[value], () => {
        MacSpotUtils.setVal('#clt_meetingtype', value);
        renderMeetingLengths(value);
        checkTriggerValidateContact();
      }));
    });
    document.getElementById('meeting_type_group').style.display = 'block';
  }

  function renderMeetingLengths(type) {
    const container = document.getElementById('time_slot_select');
    container.innerHTML = '';
    (window.lengths[type] || [90]).forEach(length => {
      container.appendChild(MacSpotUtils.createRadio('meeting_length', length, `${length} min`, () => {
        MacSpotUtils.setVal('#clt_meetinglength', String(length));
        document.querySelector('#clt_meetinglength')?.setAttribute('value', String(length));
        console.log('🧪 DEBUG set clt_meetinglength to:', length);
        checkTriggerValidateContact();
      }));
    });
    document.getElementById('time_slot_group').style.display = 'block';
  }


  async function validateContact() {
    const email = MacSpotUtils.getVal('#booking_email'), type = MacSpotUtils.getVal('#clt_meetingtype');
    if (!email.includes('@') || !type) return;
    const payload = { email, meeting_type: type };
    const response = await MacSpotUtils.fetchJSON('/api/validate_contact', payload, 'POST');
    const { contact_id, missing_fields, status, metadata } = response;
    console.log('📦 missing_fields:', missing_fields);
    console.log('📦 metadata:', metadata);
    window.formState = {
      status,
      contact_id,
      email: metadata?.email || email,
      meeting_type: metadata?.meeting_type || type,
      meeting_length: metadata?.meeting_length || MacSpotUtils.getVal('#clt_meetinglength'),
      metadata
    };
    const baseRequired = bookingSettings?.required_fields?.base || [];
    const extraRequired = bookingSettings?.required_fields?.[type?.toLowerCase()] || [];
    const required = [...new Set([...baseRequired, ...extraRequired])];
    console.log('🧪 validateContact() contact_id:', contact_id);
    if (contact_id) {
      MacSpotUtils.setVal('#clt_contact_id', contact_id);
    }

    // Move toggleFields logic up first to show necessary fields
    toggleFields(status, missing_fields || [], required, metadata || {});

    // no additional metadata autofill here — only toggleFields controls visibility and population

    checkReady();
    console.log('📡 meeting_type vid validateContact():', MacSpotUtils.getVal('#clt_meetingtype'));
    console.log('📡 meeting_length vid validateContact():', MacSpotUtils.getVal('#clt_meetinglength'));
    console.log('📡 clt_ready vid validateContact():', MacSpotUtils.getVal('#clt_ready'));

    if (status === 'existing_customer') {
      // Ensure meeting_length is set before triggering initAvailableSlotFetch
      if (MacSpotUtils.getVal('#clt_ready') === 'true' && contact_id) {
        console.log('📡 clt_ready är true – triggar initAvailableSlotFetch');
        window.initAvailableSlotFetch?.({
          email: MacSpotUtils.getVal('#clt_email'),
          meeting_type: MacSpotUtils.getVal('#clt_meetingtype'),
          meeting_length: MacSpotUtils.getVal('#clt_meetinglength'),
          contact_id: MacSpotUtils.getVal('#clt_contact_id')
        });
      }
    }
  }

  function toggleFields(status, missing_fields, required, metadata) {
    const containerVisibleFields = new Set();

    if (status === 'new_customer') {
      required.forEach(id => containerVisibleFields.add(id));
    } else if (status === 'incomplete') {
      missing_fields.forEach(id => containerVisibleFields.add(id));
    }

    METADATA_KEYS.forEach(key => {
      const el = document.getElementById(key);
      if (!el) return;
      const shouldShow = containerVisibleFields.has(key);
      if (!shouldShow) {
        el.style.display = 'none';
        MacSpotUtils.setVal(`#${key}`, ''); // Clear visible DOM field if not shown
      } else {
        el.style.display = 'block';
        if (missing_fields?.includes(key)) {
          const val = metadata?.[key];
          if (typeof val === 'string' && val.trim()) {
            MacSpotUtils.setVal(`#${key}`, val);
          } else {
            MacSpotUtils.setVal(`#${key}`, '');
          }
        } else {
          MacSpotUtils.setVal(`#${key}`, ''); // Hide backend data from being shown
        }
      }
    });

    const btn = document.getElementById('contact-update-button');
    if (btn) {
      if (status === 'new_customer') {
        btn.value = btn.textContent = 'Skapa';
        btn.style.display = 'block';
      } else if (status === 'incomplete') {
        btn.value = btn.textContent = 'Uppdatera';
        btn.style.display = 'block';
      } else {
        btn.style.display = 'none';
      }
    }

    const addr = document.getElementById('address_fields');
    if (addr) {
      const showAddr = ADDRESS_FIELD_IDS.some(id => containerVisibleFields.has(id));
      addr.style.display = showAddr ? 'block' : 'none';
    }
  }

  async function submitContact(e) {
    e.preventDefault();
    if (!window.formState) {
      console.log('🛠 DEBUG submitContact start – current formState:', window.formState);
      console.warn('🛑 submitContact avbruten – formState saknas');
      return;
    }
    const status = window.formState?.status || '';
    if (status !== 'new_customer' && status !== 'incomplete') {
      console.warn('🛑 submitContact called but status is neither new_customer nor incomplete:', status);
      return;
    }
    // Only include visible metadata fields, convert empty strings to null, fallback to formState.metadata if needed
    const visible = METADATA_KEYS.filter(k => {
      const el = document.getElementById(k);
      return el && (el.offsetParent !== null || el.offsetHeight > 0);
    });
    const metadata = Object.fromEntries(
      visible.map(k => {
        const domVal = MacSpotUtils.getVal(`#${k}`);
        const fallbackVal = window.formState?.metadata?.[k];
        const chosenVal = (domVal && domVal.trim()) ? domVal : (fallbackVal && fallbackVal.trim() ? fallbackVal : null);
        return [k, chosenVal];
      })
    );
    console.log('🧪 Submitting metadata:', metadata);
    const payload = {
      email: MacSpotUtils.getVal('#clt_email'),
      meeting_type: MacSpotUtils.getVal('#clt_meetingtype'),
      metadata,
      write_if_valid: true
    };
    const { contact_id, status: newStatus } = await MacSpotUtils.fetchJSON('/api/validate_contact', payload, 'POST');
    if (!contact_id) {
      MacSpotUtils.setVal('#clt_ready', 'false');
      alert('Kunde inte skapa eller uppdatera kontakt. Kontrollera att alla fält är korrekt ifyllda.');
      return;
    }
    MacSpotUtils.setVal('#clt_contact_id', contact_id);

    window.formState = {
      contact_id,
      email: MacSpotUtils.getVal('#clt_email'),
      meeting_type: MacSpotUtils.getVal('#clt_meetingtype'),
      meeting_length: MacSpotUtils.getVal('#clt_meetinglength'),
      status: newStatus || status
    };

    checkReady();
    await validateContact();

    if (MacSpotUtils.getVal('#clt_ready') === 'true' && MacSpotUtils.getVal('#clt_contact_id')) {
      // After successful creation or update, initAvailableSlotFetch and hide form
      console.log('✅ Triggering initAvailableSlotFetch after successful submitContact');
      window.initAvailableSlotFetch?.({
        email: MacSpotUtils.getVal('#clt_email'),
        meeting_type: MacSpotUtils.getVal('#clt_meetingtype'),
        meeting_length: MacSpotUtils.getVal('#clt_meetinglength'),
        contact_id: MacSpotUtils.getVal('#clt_contact_id')
      });
      hideContactForm();
    }
  }

  // updateSubmitButton removed; logic now unified in checkReady()

  function checkReady() {
    const status = window.formState?.status || '';
    console.log('🧪 checkReady → email:', MacSpotUtils.getVal('#clt_email'));
    console.log('🧪 checkReady → meeting_type:', MacSpotUtils.getVal('#clt_meetingtype'));
    console.log('🧪 checkReady → meeting_length:', MacSpotUtils.getVal('#clt_meetinglength'));
    console.log('🧪 formState.status:', window.formState?.status);
    if (status === 'existing_customer') {
      MacSpotUtils.setVal('#clt_ready', 'true');
      console.log('🧪 checkReady – status:', status, '| clt_ready: true (forced for existing_customer)');
      return;
    }
    const allCltFilled = ['#clt_email', '#clt_meetingtype', '#clt_meetinglength'].every(id => {
      const el = document.querySelector(id);
      return el && typeof el.value === 'string' && el.value.trim();
    });
    const type = MacSpotUtils.getVal('#clt_meetingtype');
    // Use the same required fields logic as in validateContact()
    const baseRequired = bookingSettings?.required_fields?.base || [];
    const extraRequired = bookingSettings?.required_fields?.[type?.toLowerCase()] || [];
    const required = [...new Set([...baseRequired, ...extraRequired])];
    console.log('🧪 Kontroll checkReady – required:', required);
    console.log('🧪 Kontroll checkReady – baseRequired:', baseRequired);
    console.log('🧪 Kontroll checkReady – extraRequired:', extraRequired);
    console.log('🧪 DEBUG current values:', required.map(id => [id, MacSpotUtils.getVal(`#${id}`)]));
    console.log('🧪 DEBUG checkReady with fallback to formState.metadata where necessary');
    const allRequiredFilled = required.every(id => {
      const el = document.getElementById(id);
      const val = MacSpotUtils.getVal(`#${id}`) || (window.formState?.metadata?.[id] ?? '');
      console.log('🧪 checkReady field:', id, 'value:', val);
      return typeof val === 'string' && val.trim();
    });
    // Removed clt_contact_id requirement from isReady
    const isReady = allCltFilled && allRequiredFilled;
    MacSpotUtils.setVal('#clt_ready', isReady ? 'true' : 'false');
    console.log('🧪 clt_ready just set:', isReady);
    const btn = document.getElementById('contact-update-button');
    if (btn) {
      if (isReady && status === 'existing_customer') {
        btn.style.display = 'none';
        btn.style.visibility = 'hidden';
      } else if (status === 'incomplete' || status === 'new_customer') {
        btn.value = btn.textContent = status === 'new_customer' ? 'Skapa' : 'Uppdatera';
        btn.style.display = 'block';
        btn.style.opacity = '1';
        btn.style.pointerEvents = 'auto';
        btn.style.visibility = 'visible';
        btn.disabled = !isReady;
      } else {
        btn.style.display = 'none';
        btn.style.visibility = 'hidden';
      }
    }
    console.log('🧪 checkReady – status:', status, '| clt_ready:', isReady);
    // 🧪 DEBUG: Logga elementvärden för alla required-fält
    console.log('🧪 DEBUG element values:');
    required.forEach(id => {
      const el = document.getElementById(id);
      if (!el) {
        console.warn(`❗ Saknar DOM-element för id "${id}"`);
      } else {
        console.log(`🔍 ${id} =`, el.value);
      }
    });
  }


function hideContactForm() {
  // Hide only the metadata fields
  METADATA_KEYS.forEach(id => {
    const el = document.getElementById(id);
    if (el) el.style.display = 'none';
  });
  // Only hide the contact update button, keep meeting_type_group and time_slot_group visible
  const sections = ['contact-update-button'];
  sections.forEach(id => {
    const el = document.getElementById(id);
    if (el) el.style.display = 'none';
  });
}

function groupSlotsByDay(slots) {
  return slots.reduce((acc, slot) => {
    const day = slot.slot_local?.slice(0, 10);
    if (!acc[day]) acc[day] = [];
    acc[day].push(slot);
    return acc;
  }, {});
}

function checkTriggerValidateContact() {
  const email = MacSpotUtils.getVal('#booking_email');
  const type = MacSpotUtils.getVal('#clt_meetingtype');
  const length = MacSpotUtils.getVal('#clt_meetinglength');
  if (email.includes('@') && type && length) {
    validateContact();
  }
}
</script>
END: embed_block_1_contact.js

====================
📄 Fil: frontend_webflow/embed_block_2_calendar.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-29 21:35:34
📏 Antal rader: 442
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 21 rader (4.8%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 48
🧪 TODO/FIXME: 0
====================
START: embed_block_2_calendar.js
<script>
// Globala flaggor för valhantering och månad
window.userHasManuallySelectedDate = false;
window.initialSlotRendered = false;
window.lastRenderedMonth = null;

// Maxbokningsdatum: 60 dagar framåt
const maxBookingDate = new Date();
maxBookingDate.setDate(maxBookingDate.getDate() + 60); // 60 dagar framåt

window.CalendarModule = {
  renderCalendar: function(groupedSlots, firstDate) {
    // Hide calendar if meeting type or meeting length is not selected
    const cltType = document.getElementById('clt_meetingtype')?.value;
    const cltLength = document.getElementById('clt_meetinglength')?.value;
    if (!cltType || !cltLength) {
      const wrapper = document.getElementById('calendar_wrapper');
      if (wrapper) {
        wrapper.style.display = 'none';
        wrapper.style.opacity = '0';
        wrapper.style.visibility = 'hidden';
      }
      return;
    }
    if (!(firstDate instanceof Date) || isNaN(firstDate.getTime())) {
      console.warn('❌ Ogiltigt startdatum i renderCalendar');
      return;
    }
    if (!groupedSlots || typeof groupedSlots !== 'object') {
      console.warn('❌ groupedSlots saknas eller är ogiltigt i renderCalendar');
      return;
    }

    const wrapper = document.getElementById('calendar_wrapper');
    if (wrapper) {
      wrapper.style.display = 'flex';
      wrapper.style.opacity = '1';
      wrapper.style.visibility = 'visible';
    }
    const grid = document.getElementById('calendar_grid');
    const weekLabelEls = grid.querySelectorAll('.weeklabel');
    const weekNumberEls = grid.querySelectorAll('.weeknumber');
    const dayEls = grid.querySelectorAll('.day');

    if (!wrapper || !grid || dayEls.length === 0) {
      console.warn('❌ Nödvändiga element saknas i DOM');
      return;
    }

    const currentMonth = new Date(firstDate.getFullYear(), firstDate.getMonth(), 1);
    const currentMonthKey = currentMonth.getFullYear() + '-' + currentMonth.getMonth();

    const monthEl = document.getElementById('calendar_month');
    if (monthEl) {
      monthEl.textContent = currentMonth.toLocaleString('sv-SE', { month: 'long', year: 'numeric' });
    }

    // Inserted: Setup calendar navigation arrows and month label click
    // --- Calculate latest allowed month based on groupedSlots (not maxBookingDate) ---
    const latestSlotDateStr = Object.keys(groupedSlots).sort().slice(-1)[0];
    const latestSlotDate = new Date(latestSlotDateStr);
    const latestAllowedMonth = new Date(latestSlotDate.getFullYear(), latestSlotDate.getMonth(), 1);
    const leftArrow = document.getElementById('cal_arrow_left');
    const rightArrow = document.getElementById('cal_arrow_right');
    if (leftArrow && rightArrow) {
      // Ny logik för att begränsa och rotera månader
      const firstAllowedMonth = new Date();
      firstAllowedMonth.setDate(1);
      const lastAllowedMonth = latestAllowedMonth;

      leftArrow.onclick = () => {
        const prevMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1);
        window.userHasManuallySelectedDate = false;
        if (
          currentMonth.getFullYear() === firstAllowedMonth.getFullYear() &&
          currentMonth.getMonth() === firstAllowedMonth.getMonth()
        ) {
          // Roterar bakåt från första → sista
          window.CalendarModule.renderCalendar(groupedSlots, lastAllowedMonth);
        } else {
          window.CalendarModule.renderCalendar(groupedSlots, prevMonth);
        }
      };

      rightArrow.onclick = () => {
        const nextMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1);
        window.userHasManuallySelectedDate = false;
        if (
          currentMonth.getFullYear() === lastAllowedMonth.getFullYear() &&
          currentMonth.getMonth() === lastAllowedMonth.getMonth()
        ) {
          // Roterar framåt från sista → första
          window.CalendarModule.renderCalendar(groupedSlots, firstAllowedMonth);
        } else {
          window.CalendarModule.renderCalendar(groupedSlots, nextMonth);
        }
      };
      leftArrow.style.cursor = 'pointer';
      rightArrow.style.cursor = 'pointer';
    }
    if (monthEl) {
      monthEl.onclick = () => {
        const today = new Date();
        window.CalendarModule.renderCalendar(window.latestAvailableSlots, today);
      };
      monthEl.style.cursor = 'pointer';
    }

    const labels = ['', 'M', 'T', 'O', 'T', 'F', 'L', 'S'];
    weekLabelEls.forEach((el, index) => {
      el.textContent = labels[index] || '';
    });

    const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
    const rawLastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
    const lastDay = rawLastDay > maxBookingDate ? maxBookingDate : rawLastDay;
    const jsDay = (firstDay.getDay() + 6) % 7; // ensures Monday = 0
    const startOffset = jsDay;
    const totalDays = startOffset + lastDay.getDate();
    const numWeeks = Math.ceil(totalDays / 7);
    const maxDayElements = dayEls.length;

    window.firstAvailableInMonthSelected = false;
    let dayIndex = 0;
    for (let week = 0; week < numWeeks; week++) {
      const monday = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1 - startOffset + week * 7);
      const weekNumber = window.getISOWeek(monday);
      if (week < weekNumberEls.length) {
        weekNumberEls[week].textContent = 'v' + weekNumber;
      }

      for (let wd = 0; wd < 7; wd++) {
        const gridIndex = week * 7 + wd;
        if (dayIndex >= maxDayElements) break;
        const dayEl = dayEls[dayIndex];
        if (!dayEl) {
          dayIndex++;
          continue;
        }
        const cellDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1 - startOffset + gridIndex);
        // ISO-format för datum (YYYY-MM-DD, svensk lokal)
        const isoDate = cellDate.toLocaleDateString('sv-SE').replaceAll('.', '-');

        if (cellDate.getMonth() !== currentMonth.getMonth()) {
          dayEl.textContent = '';
          dayEl.removeAttribute('data-date');
          dayEl.classList.remove('today', 'available', 'selected');
          dayIndex++;
          continue;
        }
        // Visa alla dagar i månaden, men endast tillgängliga dagar blir klickbara
        dayEl.textContent = cellDate.getDate();
        dayEl.dataset.date = isoDate;

        const isToday = cellDate.toDateString() === new Date().toDateString();
        if (isToday) dayEl.classList.add('today');
        else dayEl.classList.remove('today');

        const availableSlots = groupedSlots[isoDate];
        const isAvailable = Array.isArray(availableSlots) && availableSlots.length > 0;
        if (isAvailable) {
          dayEl.classList.add('available');
          const cloned = dayEl.cloneNode(true);
          cloned.classList.add('available');
          if (isToday) cloned.classList.add('today');
          cloned.addEventListener('click', () => {
            // Manuell val
            window.userHasManuallySelectedDate = true;
            const allDays = document.querySelectorAll('.day');
            allDays.forEach(d => d.classList.remove('selected'));
            cloned.classList.add('selected');
            const selectedDateEl = document.getElementById('selected_date');
            if (selectedDateEl) {
              const weekday = cellDate.toLocaleDateString('sv-SE', { weekday: 'long' });
              const formatted = `${weekday.charAt(0).toUpperCase() + weekday.slice(1)} ${cellDate.getDate()} ${cellDate.toLocaleDateString('sv-SE', { month: 'short' })}`;
              selectedDateEl.textContent = formatted;
            }
            window.CalendarModule.highlightDate(cloned);
            window.CalendarModule.renderTimes(groupedSlots[isoDate]);
          });
          dayEl.replaceWith(cloned);

          // Om månad just bytts (pga pilklick) och ingen dag är vald – välj första tillgängliga dag i denna månad
          const isSameMonth = currentMonth.getMonth() === cellDate.getMonth() && currentMonth.getFullYear() === cellDate.getFullYear();
          if (!window.firstAvailableInMonthSelected && isSameMonth && !window.userHasManuallySelectedDate) {
            // Kontrollera att datumet verkligen är den första tillgängliga i denna månad
            const currentMonthStr = `${currentMonth.getFullYear()}-${String(currentMonth.getMonth() + 1).padStart(2, '0')}`;
            const isoMonthStr = isoDate.slice(0, 7); // YYYY-MM
            if (isoMonthStr === currentMonthStr) {
              // Ensure only one .day has 'selected' class
              const allDays = document.querySelectorAll('.day');
              allDays.forEach(d => d.classList.remove('selected'));
              cloned.classList.add('selected');
              const selectedDateEl = document.getElementById('selected_date');
              if (selectedDateEl) {
                const weekday = cellDate.toLocaleDateString('sv-SE', { weekday: 'long' });
                const formatted = `${weekday.charAt(0).toUpperCase() + weekday.slice(1)} ${cellDate.getDate()} ${cellDate.toLocaleDateString('sv-SE', { month: 'short' })}`;
                selectedDateEl.textContent = formatted;
              }
              cloned.scrollIntoView({ behavior: 'smooth', block: 'center' });
              window.CalendarModule.renderTimes(groupedSlots[isoDate]);
              window.initialSlotRendered = true;
              window.lastRenderedMonth = currentMonthKey;
              window.firstAvailableInMonthSelected = true;
            }
          }
        } else {
          dayEl.classList.remove('available');
          dayEl.classList.remove('selected');
        }
        dayIndex++;
      }
    }

    for (let i = numWeeks; i < weekNumberEls.length; i++) {
      weekNumberEls[i].textContent = '';
    }

    for (let i = dayIndex; i < dayEls.length; i++) {
      const el = dayEls[i];
      el.textContent = '';
      el.removeAttribute('data-date');
      el.classList.remove('today', 'available', 'selected');
    }

    console.log('🧪 Kontroll DOM:', {
      wrapperExists: !!wrapper,
      gridExists: !!grid,
      dayCount: dayEls.length,
      weekLabelCount: weekLabelEls.length,
      weekNumberCount: weekNumberEls.length
    });
    console.log('✅ Kalender renderad');

    // Förval första tillgängliga dag - logik flyttad till inuti isAvailable ovan, samt skyddas av userHasManuallySelectedDate.

    // Hide calendar if meeting type or meeting length is cleared after selection
    const cltTypeCheck = document.getElementById('clt_meetingtype')?.value;
    const cltLengthCheck = document.getElementById('clt_meetinglength')?.value;
    const wrapperCheck = document.getElementById('calendar_wrapper');
    if (!cltTypeCheck || !cltLengthCheck) {
      if (wrapperCheck) {
        wrapperCheck.style.display = 'none';
      }
    }
  },
  renderTimes: function(times) {
    const timeGrid = document.getElementById('time_grid');
    const submitButton = document.getElementById('submit-booking-button');
    const cltMeetingTime = document.getElementById('clt_meetingtime');
    if (!timeGrid || !Array.isArray(times)) {
      console.warn('❌ renderTimes: time_grid saknas eller times är ogiltig');
      return;
    }

    const timeItems = timeGrid.querySelectorAll('.timeitems');
    timeItems.forEach((item, idx) => {
      const label = item.querySelector('span.time-label') || item.querySelector('span.w-form-label');
      if (label) {
        label.className = 'time-label w-form-label';
      }
      const input = item.querySelector('input[type="radio"]');
      const slot = times[idx];

      if (!slot || !input || !label) {
        item.style.display = 'none';
        return;
      }

      if (label && label.textContent === 'Radio') {
        label.textContent = '';
      }

      const labelText = typeof slot === 'object' && slot.slot_local
        ? slot.slot_local.slice(11, 16)
        : typeof slot === 'string'
        ? slot.slice(11, 16)
        : '';

      if (labelText) {
        label.textContent = labelText;
      } else {
        item.style.display = 'none';
        return;
      }

      input.value = slot.slot_iso || slot;
      input.dataset.slotIso = slot.slot_iso || slot;
      input.name = 'meeting_time';
      input.id = `radio-${idx}`;
      label.setAttribute('for', `radio-${idx}`);
      item.dataset.slotIso = slot.slot_iso || slot;
      item.style.display = 'block';

      item.onclick = () => {
        timeItems.forEach(el => el.classList.remove('selected'));
        item.classList.add('selected');

        if (!window.formState) window.formState = {};
        window.formState.slot_iso = slot.slot_iso || slot;
        window.formState.meeting_time = labelText;

        if (cltMeetingTime) cltMeetingTime.value = slot.slot_iso || slot;

        if (submitButton) {
          submitButton.style.display = 'flex';
          submitButton.style.opacity = '1';
          submitButton.style.pointerEvents = 'auto';
          submitButton.style.visibility = 'visible';
          if (submitButton.tagName === 'INPUT') {
            submitButton.value = 'Boka';
          } else {
            submitButton.textContent = 'Boka';
          }
        }

        const cltReadyEl = document.getElementById('clt_ready');
        if (cltReadyEl) cltReadyEl.value = 'true';
      };
    });
  },
  highlightDate: function(date) {
    // Highlight date logic
    console.log('Highlighting date:', date);
    // Scroll the highlighted date into view
    if (date && typeof date.scrollIntoView === 'function') {
      date.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  },
  initAvailableSlotFetch: function() {
    const cltReady = document.getElementById('clt_ready')?.value;
    if (cltReady !== 'true' || !window.formState) {
      console.warn('❌ Kan inte hämta tillgängliga tider – formState eller clt_ready saknas');
      return;
    }

    console.log('📡 Hämtar tillgängliga tider för:', window.formState);
    if (!window.formState.contact_id) {
      console.warn('⚠️ contact_id saknas i formState – fetch avbryts');
    }

    MacSpotUtils.fetchJSON('/api/getavailableslots', {
      email: window.formState.email,
      meeting_type: window.formState.meeting_type,
      meeting_length: window.formState.meeting_length,
      contact_id: window.formState.contact_id
    }, 'POST')
    .then(data => {
      console.log('🧪 Rått slotData från API:', data);
      // --- DEBUG: Kontrollera om slot för 2025-05-30 finns ---
      const debugTarget = '2025-05-30';
      if (data.slots.some(s => s.slot_iso.includes(debugTarget))) {
        console.warn('🔍 OBS! Slot finns för debugTarget:', debugTarget);
        data.slots
          .filter(s => s.slot_iso.includes(debugTarget))
          .forEach(s => console.log('⏰ Slot:', s.slot_iso));
      } else {
        console.warn('✅ Ingen slot visas för', debugTarget);
      }
      if (!Array.isArray(data.slots)) {
        console.warn('⚠️ API svarar utan slot-array:', data);
        return;
      }
      const grouped = {};
      data.slots.forEach(slot => {
        const localDate = new Date(slot.slot_iso);
        const localYear = localDate.getFullYear();
        const localMonth = String(localDate.getMonth() + 1).padStart(2, '0');
        const localDay = String(localDate.getDate()).padStart(2, '0');
        const date = `${localYear}-${localMonth}-${localDay}`;
        if (!grouped[date]) grouped[date] = [];
        grouped[date].push({
          slot_iso: slot.slot_iso,
          slot_local: slot.slot_local || slot.slot_iso
        });
      });
      console.log('📦 Skickar grouped slots till renderCalendar:', grouped);
      if (typeof window.CalendarModule.renderCalendar === 'function') {
        const firstDateStr = Object.keys(grouped).sort()[0];
        const firstDate = new Date(firstDateStr);
        window.CalendarModule.renderCalendar(grouped, firstDate);
      }
    })
    .catch(err => {
      console.error('❌ Fetch error in getavailableslots:', err.message || err);
      alert('Fel vid hämtning av tider. Kontrollera din internetanslutning eller att servern är tillgänglig.');
    });
  }
};

window.getISOWeek = function(date) {
  var target = new Date(date.valueOf());
  var dayNr = (date.getDay() + 6) % 7;
  target.setDate(target.getDate() - dayNr + 3);
  var firstThursday = target.valueOf();
  target.setMonth(0, 1);
  if (target.getDay() !== 4) {
    target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
  }
  return 1 + Math.ceil((firstThursday - target) / 604800000);
};

// Inserted CSS
const style = document.createElement('style');
style.innerHTML = `
.day.today,
.day.available,
.day.available.selected {
  display: flex;
  width: 100%;
  height: 100%;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  align-items: center;
  justify-content: center;
}

.day.today {
  border: 1px solid #B2B2B2;
}

.day.available {
  background-color: #B2B2B2;
  color: #F5F5F5;
  cursor: pointer;
}

.day.available:hover {
  background-color: #e9a56f;
  color: #F5F5F5;
}

.day.available.selected {
  background-color: #e9a56f;
  color: #F5F5F5;
  border: 1px solid #B2B2B2;
}
`;
document.head.appendChild(style);
// Expose initAvailableSlotFetch globally
window.initAvailableSlotFetch = window.CalendarModule.initAvailableSlotFetch;
</script>
END: embed_block_2_calendar.js

====================
📄 Fil: frontend_webflow/embed_block_3_booking.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-30 16:41:57
📏 Antal rader: 147
🧩 Antal funktioner: 2
💬 Kommentarstäckning: 5 rader (3.4%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 5 rader
🧠 Komplexitetspoäng: 26
🧪 TODO/FIXME: 0
====================
START: embed_block_3_booking.js
<script>
  async function submitBooking(data) {
    console.log('📡 submitBooking anropades med:', data);
    if (!data.contact_id || !data.slot_iso || !data.meeting_type || !data.meeting_length) {
      return;
    }

    const startTime = new Date(data.slot_iso);
    const endTime = new Date(startTime.getTime() + data.meeting_length * 60000);

    const payload = {
      contact_id: data.contact_id,
      meeting_type: data.meeting_type,
      meeting_length: data.meeting_length,
      start_time: startTime.toISOString(),
      end_time: endTime.toISOString(),
      slot_iso: data.slot_iso,
      email: MacSpotUtils.getVal('#clt_email')
    };

    const btn = document.getElementById('submit-booking-button');
    if (btn) btn.disabled = true;

    try {
      const response = await MacSpotUtils.fetchJSON('/api/bookings', payload, 'POST');
      console.log('✅ Booking succeeded:', response);

      // Show success UI
      const successEl = document.querySelector('.w-form-done');
      const errorEl = document.querySelector('.w-form-fail');
      if (successEl) successEl.style.display = 'block';
      if (errorEl) errorEl.style.display = 'none';
      window.formState = null;
      if (btn) {
        btn.style.display = 'none';
        btn.disabled = false;
      }

      // After showing success, reset form and UI after a timeout
      setTimeout(() => {
        const form = document.querySelector('form');
        if (form) form.reset();

        const cltReady = document.getElementById('clt_ready');
        if (cltReady) cltReady.value = 'false';

        window.formState = null;

        const successEl = document.querySelector('.w-form-done');
        if (successEl) successEl.style.display = 'none';

        const calendarWrapper = document.getElementById('calendar_wrapper');
        if (calendarWrapper) calendarWrapper.style.display = 'none';

        const typeGroup = document.getElementById('meeting_type_group');
        if (typeGroup) typeGroup.style.display = 'none';

        const slotGroup = document.getElementById('time_slot_group');
        if (slotGroup) slotGroup.style.display = 'none';

        const slotSelect = document.getElementById('time_slot_select');
        if (slotSelect) slotSelect.innerHTML = '';

        const meetingTypeSelect = document.getElementById('meeting_type_select');
        if (meetingTypeSelect) meetingTypeSelect.innerHTML = '';
      }, 10000);
    } catch (error) {
      console.error('❌ submitBooking – fel från fetchJSON:', error.message || error);
      console.warn('📡 Payload vid fel:', payload);
      console.warn('📡 User-Agent:', navigator.userAgent);
      // console.warn('📡 Browser IP:', await (await fetch('https://api.ipify.org?format=json')).json());
      // IP-hämtning blockeras av CORS i Webflow – logga istället på backend.
      // Show error UI
      const errorEl = document.querySelector('.w-form-fail');
      const successEl = document.querySelector('.w-form-done');
      if (errorEl) errorEl.style.display = 'block';
      if (successEl) successEl.style.display = 'none';
      if (btn) btn.disabled = false;
    }
  }
  if (typeof window.submitBooking !== 'function') {
    window.submitBooking = submitBooking;
  }

  function initBookingButtonListener() {
    const btn = document.getElementById('submit-booking-button');
    if (!btn) return;

    btn.addEventListener('click', (e) => {
      e.preventDefault();

      const cltReadyEl = document.getElementById('clt_ready');
      const cltContactIdEl = document.getElementById('clt_contact_id');
      const cltMeetingTypeEl = document.getElementById('clt_meetingtype');
      const cltMeetingLengthEl = document.getElementById('clt_meetinglength');
      const cltSlotIsoEl = document.getElementById('clt_meetingtime');
      const cltEmailEl = document.getElementById('clt_email');
      const cltEmail = cltEmailEl?.value.trim();

      if (!cltEmail || !cltEmail.includes('@')) {
        alert('Ange en giltig e-postadress.');
        return;
      }

      const cltContactId = cltContactIdEl?.value.trim();
      const cltMeetingType = cltMeetingTypeEl?.value.trim();
      const cltMeetingLengthRaw = cltMeetingLengthEl?.value;
      const cltMeetingLength = parseInt(cltMeetingLengthRaw, 10);
      if (isNaN(cltMeetingLength)) return;
      const cltSlotIso = cltSlotIsoEl?.value.trim();
      const cltReady = cltReadyEl?.value.trim();

      if (!cltContactId || !cltMeetingType || !cltSlotIso || cltReady !== 'true') {
        return;
      }

      const bookingPayload = {
        contact_id: cltContactId,
        meeting_type: cltMeetingType,
        meeting_length: cltMeetingLength,
        slot_iso: cltSlotIso,
        email: cltEmail
      };

      submitBooking(bookingPayload);
    });
  }
  if (typeof window.initBookingButtonListener !== 'function') {
    window.initBookingButtonListener = initBookingButtonListener;
  }

  window.addEventListener('DOMContentLoaded', () => {
    try {
      if (document.getElementById('submit-booking-button')) {
        initBookingButtonListener();
      } else {
        const interval = setInterval(() => {
          if (document.getElementById('submit-booking-button')) {
            clearInterval(interval);
            initBookingButtonListener();
          }
        }, 100);
      }
    } catch (err) {
    }
  });
</script>
END: embed_block_3_booking.js

====================
📄 Fil: frontend_webflow/styles_init.css
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 📄 Okänt format
📅 Senast ändrad: 2025-05-25 12:16:45
📏 Antal rader: 21
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 1
🧪 TODO/FIXME: 0
====================
START: styles_init.css
<style>
  #submit-booking-button,
  #contact-update-button {
    display: none;
    opacity: 0;
    pointer-events: none;
    visibility: hidden;
  }

  .radio-label {
    font-weight: 300 !important;
    font-family: "Roboto Slab", sans-serif !important;
    font-size: 14px !important;
    color: var(--klr-grey);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    text-align: left;
    line-height: 1.4;
  }
</style>
END: styles_init.css

====================
📄 Fil: frontend_webflow/footer_block_4_verification.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-12 21:33:17
📏 Antal rader: 42
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 5
🧪 TODO/FIXME: 0
====================
START: footer_block_4_verification.py
<script>
window.addEventListener('DOMContentLoaded', async () => {
  const token = new URLSearchParams(window.location.search).get('token');
  const container = document.getElementById('verify-message');

  if (!token || !container) {
    container.textContent = "Token saknas eller är ogiltig.";
    return;
  }

  container.textContent = "Verifierar…";

  try {
    const response = await MacSpotUtils.fetchJSON('/api/verify_token', { token }, 'POST');
    const { status, message, download_url, action, email } = response;

    if (status === 'confirmed' && action === 'newsletter') {
      container.textContent = "Tack! Din prenumeration är nu bekräftad.";
    } else if (status === 'confirmed' && action === 'download_pdf' && download_url) {
      container.textContent = "Din nedladdning startar strax…";

      if (window.MacSpotUtils?.trackEvent) {
        window.MacSpotUtils.trackEvent('pdf_download_triggered', {
          email,
          action,
          campaign_id: 'klrab_juni_2025',
          pdf_id: 'whitepaper_klrab2025'
        });
      }

      setTimeout(() => {
        window.location.href = download_url;
      }, 2000);
    } else {
      container.textContent = message || "Verifieringen lyckades, men inget hände.";
    }
  } catch (err) {
    console.error("Verifieringsfel:", err);
    container.textContent = "Det gick inte att verifiera din begäran.";
  }
});
</script>
END: footer_block_4_verification.py

====================
📄 Fil: frontend_webflow/embed_block_5_verify-message.py
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🐍 Python
📅 Senast ändrad: 2025-06-12 21:22:46
📏 Antal rader: 43
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 2 rader (4.7%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 4
🧪 TODO/FIXME: 0
====================
START: embed_block_5_verify-message.py
<script>
window.addEventListener('DOMContentLoaded', () => {
  const forms = document.querySelectorAll('form');

  forms.forEach(form => {
    const emailInput = form.querySelector('input[type="email"].newsletter-email');
    if (!emailInput) return;

    form.addEventListener('submit', async e => {
      e.preventDefault();
      const email = emailInput.value.trim();
      if (!email || !email.includes('@')) {
        alert('Ange en giltig e-postadress.');
        return;
      }

      try {
        // 📨 Skicka verifieringsbegäran
        await MacSpotUtils.fetchJSON('/api/request_verification', {
          email,
          action: 'newsletter',
          campaign_id: 'klrab_juni_2025'
        }, 'POST');

        // 🧠 Spåra med tracking.js
        if (window.MacSpotUtils?.trackEvent) {
          window.MacSpotUtils.trackEvent('verification_requested', {
            email,
            action: 'newsletter',
            campaign_id: 'klrab_juni_2025'
          });
        }

        alert('Tack! Kontrollera din e-post.');
        form.reset();
      } catch (err) {
        alert('Något gick fel. Försök igen.');
        console.error('Verifieringsfel:', err);
      }
    });
  });
});
</script>
END: embed_block_5_verify-message.py

====================
📄 Fil: frontend_webflow/tracker.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-06-11 07:09:02
📏 Antal rader: 232
🧩 Antal funktioner: 2
💬 Kommentarstäckning: 2 rader (0.9%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 5 rader
🧠 Komplexitetspoäng: 16
🧪 TODO/FIXME: 0
====================
START: tracker.js
<script>
(function () {
  const API_URL = 'https://macspotbackend.azurewebsites.net/api/tracking';

  let visitorId = localStorage.getItem('visitor_id');
  if (!visitorId) {
    visitorId = crypto.randomUUID();
    localStorage.setItem('visitor_id', visitorId);
  }

  const sessionStartTime = Date.now();

  // Advanced session tracking variables
  let visibleSeconds = 0;
  let lastVisibleTime = document.visibilityState === 'visible' ? Date.now() : null;
  let maxScroll = 0;
  let resizeCount = 0;

  let rageClickCount = 0;
  let lastClickTime = 0;
  let idleTime = 0;
  let lastActivity = Date.now();
  let scrollVelocityMax = 0;
  let lastScrollY = window.scrollY;

  ['mousemove', 'keydown', 'scroll'].forEach(event => {
    document.addEventListener(event, () => lastActivity = Date.now());
  });

  setInterval(() => {
    const now = Date.now();
    if (now - lastActivity > 5000) idleTime += 5;
  }, 5000);

  window.addEventListener('scroll', () => {
    const delta = Math.abs(window.scrollY - lastScrollY);
    if (delta > scrollVelocityMax) scrollVelocityMax = delta;
    lastScrollY = window.scrollY;
  });

  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      lastVisibleTime = Date.now();
    } else if (lastVisibleTime) {
      visibleSeconds += Math.round((Date.now() - lastVisibleTime) / 1000);
      lastVisibleTime = null;
    }
  });

  window.addEventListener('resize', () => resizeCount++);
  window.addEventListener('scroll', () => {
    const current = Math.round(window.scrollY + window.innerHeight);
    if (current > maxScroll) maxScroll = current;
  });

  let ipAddress = null;
  fetch('https://api.ipify.org?format=json')
    .then(res => res.json())
    .then(data => { ipAddress = data.ip; })
    .catch(() => {});

  function sha256(input) {
    const buffer = new TextEncoder().encode(input);
    return crypto.subtle.digest("SHA-256", buffer).then(buf => {
      return Array.from(new Uint8Array(buf)).map(b => b.toString(16).padStart(2, "0")).join("");
    });
  }

  function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }

  async function sendEvent(eventType, metadata = {}) {
    const fingerprintInput = `${navigator.userAgent}|${window.screen.width}x${window.screen.height}|${navigator.language}|${Intl.DateTimeFormat().resolvedOptions().timeZone}`;
    const fingerprintHash = await sha256(fingerprintInput);

    const enrichedMetadata = {
      ...metadata,
      user_agent: navigator.userAgent,
      screen: {
        width: window.screen.width,
        height: window.screen.height,
        devicePixelRatio: window.devicePixelRatio
      },
      language: navigator.language || (navigator.languages && navigator.languages[0]) || 'unknown',
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || null,
      platform: navigator.platform || null,
      hardwareConcurrency: navigator.hardwareConcurrency || null,
      deviceMemory: navigator.deviceMemory || null,
      performance_now: Math.round(performance.now()),
      viewport: {
        innerHeight: window.innerHeight,
        scrollY: window.scrollY
      },
      timezone_offset_min: new Date().getTimezoneOffset(),
      is_mobile: /Mobi|Android/i.test(navigator.userAgent),
      color_depth: window.screen.colorDepth,
      nav_type: performance?.navigation?.type ?? null,
      do_not_track: navigator.doNotTrack === "1",
      fingerprint: fingerprintHash,
      ip_address: ipAddress || null
    };

    try {
      if (performance?.timing?.loadEventEnd > 0) {
        enrichedMetadata.page_load_ms = performance.timing.loadEventEnd - performance.timing.navigationStart;
      }
    } catch {}

    const payload = {
      visitor_id: visitorId,
      event_type: eventType,
      url: window.location.pathname,
      timestamp: new Date().toISOString(),
      referrer: document.referrer || null,
      utm_source: getQueryParam('utm_source'),
      utm_medium: getQueryParam('utm_medium'),
      utm_campaign: getQueryParam('utm_campaign'),
      metadata: enrichedMetadata,
    };

    try {
      if (navigator.sendBeacon) {
        navigator.sendBeacon(API_URL, JSON.stringify(payload));
      } else {
        await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
      }
    } catch (err) {
      console.error('[tracking] beacon error:', err);
    }
  }

  sendEvent('page_view');

  window.addEventListener('beforeunload', () => {
    if (lastVisibleTime) {
      visibleSeconds += Math.round((Date.now() - lastVisibleTime) / 1000);
    }

    const timeOnPage = Math.round(performance.now() / 1000);
    const visitedPages = JSON.parse(sessionStorage.getItem('visitedPages') || '[]');
    const clickTrail = JSON.parse(sessionStorage.getItem('clickTrail') || '[]');

    sendEvent('session_end', {
      time_on_page_sec: timeOnPage,
      visible_seconds: visibleSeconds,
      scroll_depth_px: maxScroll,
      resize_count: resizeCount,
      visited_pages: visitedPages,
      click_trail: clickTrail,
      total_idle_seconds: idleTime,
      rage_clicks: rageClickCount,
      scroll_velocity_max: scrollVelocityMax
    });
  });

  window.addEventListener('beforeunload', () => {
    sendEvent('page_unload');
  });

  let hasScrolled = false;
  window.addEventListener('scroll', () => {
    if (!hasScrolled && window.scrollY / document.body.scrollHeight > 0.5) {
      sendEvent('scroll_50');
      hasScrolled = true;
    }
  });

  document.addEventListener('click', (e) => {
    const target = e.target.closest('a, button');
    if (target) {
      if (Date.now() - lastClickTime < 300) rageClickCount++;
      lastClickTime = Date.now();

      // Advanced clickTrail tracking
      const clickTrail = JSON.parse(sessionStorage.getItem('clickTrail') || '[]');
      clickTrail.push({
        tag: target.tagName,
        text: target.innerText?.slice(0, 50),
        href: target.href || null,
        ts: new Date().toISOString()
      });
      sessionStorage.setItem('clickTrail', JSON.stringify(clickTrail));

      sendEvent('click', {
        tag: target.tagName,
        text: target.innerText.slice(0, 30),
        href: target.href || null,
        time_since_page_load_ms: Math.round(performance.now())
      });
    }
  });

  window.MacSpotUtils = { trackEvent: sendEvent };
})();
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const form = document.querySelector("form");

  if (form) {
    form.addEventListener("submit", function (e) {
      const emailInput = document.getElementById("email");
      const nameInput = document.getElementById("name");

      const email = emailInput ? emailInput.value.trim() : null;
      const name = nameInput ? nameInput.value.trim() : null;

      if (window.MacSpotUtils && email) {
        window.MacSpotUtils.trackEvent("form_submit", {
          email: email,
          name: name,
          form_name: form.getAttribute("name") || "webflow_form",
          form_action: form.getAttribute("action") || window.location.pathname,
          page_title: document.title
        });
        console.log("[tracking] Skickade form_submit:", email, name);
      }
    });
  }

  const pages = JSON.parse(sessionStorage.getItem('visitedPages') || '[]');
  pages.push(window.location.pathname);
  sessionStorage.setItem('visitedPages', JSON.stringify(pages));
});
</script>
END: tracker.js

📁 KONFIGURATIONSFILER (function.json / host.json / package.json / .funcignore)
====================================

📄 .funcignore
   # Exclude dev-only files and folders
   .git
   .vscode
   .env
   *.log
   test/
   tests/
   
   # Explicitly include all required files and folders
   !host.json
   !package.json
   !package-lock.json
   
   !node_modules/
   !node_modules/**
   
   !shared/
   !shared/**
   
   !bookings/
   !bookings/**
   !getavailableslots/
   !getavailableslots/**
   !validate_contact/
   !validate_contact/**
   !meeting_types/
   !meeting_types/**
   !refreshCalendarOrigins/
   !refreshCalendarOrigins/**
   !refreshTravelTimes/
   !refreshTravelTimes/**
   !booking_settings/
   !booking_settings/**
   !test_azurecloud/
   !test_azurecloud/**
   !tracking/
   !tracking/**
   !verify_token/
   !verify_token/**
   !request_verification/
   !request_verification/**
📄 booking_settings/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get"],
         "route": "booking_settings"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 bookings/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "bookings"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 getavailableslots/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "getavailableslots"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 host.json
   {
     "version": "2.0",
     "extensionBundle": {
       "id": "Microsoft.Azure.Functions.ExtensionBundle",
       "version": "[4.*, 5.0.0)"
     },
     "extensions": {
       "http": {
         "cors": {
           "allowedOrigins": [
             "https://www.klrab.se"
           ],
           "supportCredentials": false
         }
       }
     }
   }
📄 local_frontend/package.json
   {
     "name": "local_frontend",
     "version": "1.0.0",
     "type": "module",
     "main": "vite.config.js",
     "scripts": {
       "dev": "vite",
       "build": "vite build",
       "preview": "vite preview"
     },
     "keywords": [],
     "author": "",
     "license": "ISC",
     "dependencies": {
       "react": "^19.1.0",
       "react-dom": "^19.1.0",
       "react-icons": "^5.5.0",
       "react-router-dom": "^6.30.1",
       "vite": "^6.3.5"
     },
     "devDependencies": {
       "@tailwindcss/postcss": "^4.1.8",
       "@vitejs/plugin-react": "^4.5.1",
       "autoprefixer": "^10.4.21",
       "postcss": "^8.5.4",
       "tailwindcss": "^4.1.8"
     },
     "description": ""
   }

📄 meeting_types/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": [ "get" ],
         "route": "meeting_types"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 package.json
   {
     "name": "macspot-api",
     "version": "1.0.0",
     "description": "Azure Functions backend för MacSpot CRM/ERP",
     "scripts": {
       "start": "func start",
       "dev": "func start --verbose",
       "deploy": "func azure functionapp publish macspotbackend",
       "build": "echo 'Nothing to build'"
     },
     "dependencies": {
       "@azure/functions": "^4.7.0",
       "@azure/msal-node": "^3.5.1",
       "@microsoft/microsoft-graph-client": "^3.0.0",
       "date-holidays": "^3.24.3",
       "dav": "^1.8.0",
       "dotenv": "^16.5.0",
       "isomorphic-fetch": "^3.0.0",
       "jsonwebtoken": "^9.0.0",
       "luxon": "^3.4.4",
       "node-fetch": "^2.7.0",
       "node-ical": "^0.20.1",
       "p-limit": "^6.2.0",
       "pg": "^8.15.6",
       "react": "^19.1.0",
       "react-dom": "^19.1.0",
       "uuid": "^9.0.0",
       "vite": "^6.3.5",
       "xml2js": "^0.6.2"
     },
     "devDependencies": {
       "autoprefixer": "^10.4.21",
       "postcss": "^8.5.4",
       "tailwindcss": "^4.1.8"
     }
   }

📄 refreshCalendarOrigins/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 refreshTravelTimes/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 request_verification/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "request_verification"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 test_azurecloud/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get"],
         "route": "test_azurecloud"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 tracking/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "tracking"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 validate_contact/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["get", "post"],
         "route": "validate_contact"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 verify_token/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "verify_token"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📈 SUMMERING AV ALLA JS-FILER
====================================
📏 Totalt antal rader kod: 1332
🧩 Totalt antal funktioner: 14
🧠 Total komplexitetspoäng: 139
🧪 Antal TODO/FIXME totalt: 0

📊 Per fil:
fil,rader,funktioner,komplexitet,kommentarer,imports
webflow_init.html,61,1,4,0,0
embed_block_1_contact.js,344,9,35,18,0
embed_block_2_calendar.js,442,0,48,21,0
embed_block_3_booking.js,147,2,26,5,0
styles_init.css,21,0,1,0,0
footer_block_4_verification.py,42,0,5,0,0
embed_block_5_verify-message.py,43,0,4,2,0
tracker.js,232,2,16,2,0
