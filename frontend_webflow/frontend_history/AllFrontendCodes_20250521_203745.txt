📂 KODTRÄD
==========
├── frontend_webflow
│   ├── Embed Block 1.js
│   ├── Embed Block 2.js
│   ├── Embed Block 3.js
==========

====================
📄 Fil: frontend_webflow/Embed Block 1.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-15 14:29:48
📏 Antal rader: 638
🧩 Antal funktioner: 14
💬 Kommentarstäckning: 38 rader (6.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 34 rader
🧠 Komplexitetspoäng: 63
🧪 TODO/FIXME: 0
====================
START: Embed Block 1.js
<script>
  // Återställer formulärstate (mötestyp, mötestid, tider, clt_ready)
  function resetFormState() {
    console.log('🔄 Återställer formulärstate');
    const fieldsToClear = [
      'clt_meetingtype',
      'clt_meetinglength',
      'clt_ready'
    ];
    fieldsToClear.forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = '';
    });

    const meetingRadios = document.querySelectorAll('input[name="meeting_type"]');
    meetingRadios.forEach(r => r.checked = false);
    const lengthRadios = document.querySelectorAll('input[name="meeting_length"]');
    lengthRadios.forEach(r => r.checked = false);

    const slotContainer = document.getElementById('time_slot_select');
    if (slotContainer) slotContainer.innerHTML = '';
    const slotGroup = document.getElementById('time_slot_group');
    if (slotGroup) slotGroup.style.display = 'none';
  }

  // Kontrollerar e-post och triggar laddning av mötestyper och validering.
  function validateEmail() {
    console.log('🔎 validateEmail() körs');
    const emailEl = document.querySelector('#booking_email');
    const email = emailEl ? emailEl.value.trim() : '';
    const cltEmail = document.getElementById('clt_email');
    if (cltEmail) {
      cltEmail.value = email;
      console.log('📥 Satt #clt_email:', email);
    }
    if (email.length > 0 && email.includes('@')) {
      loadMeetingTypes();
      resetFormState();
      // Lägg till logg direkt efter anropet
      console.log('🧪 Validering och mötestyper triggat, väntar på meeting_type_select');
      const typeGroup = document.getElementById('meeting_type_group');
      if (typeGroup) {
        typeGroup.style.display = 'block';
        console.log('✅ Visar #meeting_type_group via style.display');
      }
    } else {
      console.log('❌ Ogiltig e-post, laddar inte mötestyper');
    }
  }

  // Laddar mötestyper och längder från backend och renderar radioknappar.
  async function loadMeetingTypes() {
    console.log('🔎 loadMeetingTypes() körs');
    try {
      const res = await fetch('https://macspotbackend.azurewebsites.net/api/meeting_types');
      if (!res.ok) throw new Error('Failed to fetch meeting types');
      const { types, lengths: loadedLengths } = await res.json();
      window.lengths = {};
      Object.entries(loadedLengths || {}).forEach(([key, val]) => {
        window.lengths[key.toLowerCase()] = val;
      });
      console.log('📡 Hämtade mötestyper och längder:', types, window.lengths);
      console.log('📊 Mötestyper:', types);
      console.log('📊 Längder per typ:', window.lengths);

      const container = document.getElementById('meeting_type_select');
      if (!container) {
        console.warn('⚠️ #meeting_type_select saknas i DOM');
        return;
      }
      container.innerHTML = '';

      function createRadio({ name, value, label, checked, onChange }) {
        const div = document.createElement('div');
        div.className = 'radio-button-items';
        const labelEl = document.createElement('label');
        labelEl.className = 'radio-button-items';
        const input = document.createElement('input');
        input.type = 'radio';
        input.name = name;
        input.value = value;
        input.className = 'radio-button-items';
        // Ingen radioknapp ska förväljas eller klickas automatiskt
        if (typeof onChange === 'function') input.addEventListener('change', onChange);
        labelEl.appendChild(input);
        const text = document.createElement('span');
        text.textContent = ` ${label}`;
        text.style.display = 'block';
        text.style.marginLeft = '10px';
        text.style.marginTop = '-20px';
        text.style.lineHeight = '1.4';
        text.style.paddingLeft = '8px';
        labelEl.appendChild(text);
        div.appendChild(labelEl);
        return div;
      }

      (Array.isArray(types) ? types : JSON.parse(types)).forEach((type, index) => {
        const value = type.toLowerCase();
        const displayNames = {
          zoom: 'Digitalt via Zoom',
          facetime: 'Digitalt via FaceTime',
          teams: 'Digitalt via Teams',
          atclient: 'Möte hos dig (ange din adress)',
          atoffice: 'Möte på mitt kontor i Stockholm'
        };
        const label = displayNames[value] || type;
        const radio = createRadio({
          name: 'meeting_type',
          value,
          label,
          checked: false,
          onChange: () => {
            console.log('🔄 Mötestyp ändrad till:', value);
            renderMeetingLengths(value);
            validateAndRenderCustomerFields();
          }
        });
        container.appendChild(radio);
      });

      const renderedRadios = container.querySelectorAll('input[name="meeting_type"]');
      if (renderedRadios.length === 0) {
        console.warn('⚠️ Inga mötestyper renderades – kontrollera types-data');
      }

      const typeGroup = document.getElementById('meeting_type_group');
      if (typeGroup) {
        typeGroup.classList.remove('hidden');
        typeGroup.classList.add('visible-group');
        console.log('✅ Visar #meeting_type_group');
      }

    } catch (err) {
      console.error('❌ Error loading meeting types:', err);
      const container = document.getElementById('meeting_type_group');
      if (container) {
        container.innerHTML = '<p style="color: red;">Kunde inte ladda mötestyper - skyll inte på mig utan på Bill Gates.</p>';
      }
    }
  }

  // Renderar längdalternativ beroende på mötestyp.
  function renderMeetingLengths(type) {
    console.log('🔎 renderMeetingLengths() körs för typ:', type);
    const slotContainer = document.getElementById('time_slot_select');
    if (!slotContainer) {
      console.warn('⚠️ #time_slot_select saknas i DOM');
      return;
    }
    slotContainer.innerHTML = '';
    const values = (window.lengths && window.lengths[type]) ? window.lengths[type] : [90];
    console.log(`⏱ Renderar ${values.length} tider för ${type}`);

    function createLengthRadio(value, checked) {
      const div = document.createElement('div');
      div.className = 'radio-button-items';
      const labelEl = document.createElement('label');
      labelEl.className = 'radio-button-items';
      const input = document.createElement('input');
      input.type = 'radio';
      input.name = 'meeting_length';
      input.value = value;
      input.className = 'radio-button-items';
      if (checked) input.checked = true;
      input.addEventListener('change', () => {
        console.log('🔄 Möteslängd ändrad till:', value);
        const cltMeetingLength = document.getElementById('clt_meetinglength');
        if (cltMeetingLength) {
          cltMeetingLength.value = value;
          console.log('📥 Satt #clt_meetinglength:', value);
          // Kopiera radioknappens mötestyp till #clt_meetingtype om möjligt
          const cltMeetingType = document.getElementById('clt_meetingtype');
          const meetingTypeEl = document.querySelector('input[name="meeting_type"]:checked');
          if (cltMeetingType && meetingTypeEl) {
            cltMeetingType.value = meetingTypeEl.value;
            console.log('📥 Bekräftat #clt_meetingtype från radioknapp:', cltMeetingType.value);
          }
        }
        validateAndRenderCustomerFields();
      });
      labelEl.appendChild(input);
      const span = document.createElement('span');
      span.textContent = ` ${value} min`;
      span.className = 'radio-label-text';
      labelEl.appendChild(span);
      div.appendChild(labelEl);
      return div;
    }

    values.forEach((value, idx) => {
      slotContainer.appendChild(createLengthRadio(value, false));
    });

    const wrapper = document.getElementById('time_slot_group');
    if (wrapper) wrapper.classList.add('visible-group');

    const slotGroup = document.getElementById('time_slot_group');
    if (slotGroup) {
      slotGroup.classList.remove('hidden');
      slotGroup.classList.add('visible-group');
      console.log('✅ Visar #time_slot_group');
      slotGroup.style.display = 'block';
      console.log('✅ Visar #time_slot_group via style.display');
    }

  }

  // Validerar kontaktuppgifter mot backend och renderar nödvändiga kontaktfält.
  async function validateAndRenderCustomerFields() {
    // Döljer alltid submit-knappen i början av valideringen
    const submitButton = document.getElementById('contact-update-button');
    if (submitButton) submitButton.style.display = 'none';
    console.log('🔎 validateAndRenderCustomerFields() körs');
    const emailEl = document.querySelector('#booking_email');
    const email = emailEl ? emailEl.value.trim() : '';
    const meetingTypeEl = document.querySelector('input[name="meeting_type"]:checked');
    const meetingType = meetingTypeEl ? meetingTypeEl.value : '';
    const meetingLengthEl = document.querySelector('input[name="meeting_length"]:checked');
    const meetingLength = meetingLengthEl ? meetingLengthEl.value : '';

    const cltEmail = document.getElementById('clt_email');
    const cltMeetingType = document.getElementById('clt_meetingtype');
    const cltMeetingLength = document.getElementById('clt_meetinglength');
    const cltReady = document.getElementById('clt_ready');
    const cltContactId = document.getElementById('clt_contact_id');
    const addressField = document.querySelector('#address_fields');
    if (!meetingType || !meetingLength) {
      console.log('⏳ Väntar på mötestyp och mötestid innan validering av namn');
      return;
    }
    // Om email eller mötestyp saknas, göm fält och knapp
    if (!email || !meetingType) {
      console.log('⚠️ E-post eller mötestyp saknas, gömmer fält och knapp');
      const allFields = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'].map(id => document.getElementById(id)).filter(Boolean);
      allFields.forEach(f => {
        f.classList.add('hidden');
        f.classList.remove('needs-filling');
      });
      if (addressField) addressField.classList.add('hidden');
      if (submitButton) submitButton.style.display = 'none';
      if (cltReady) cltReady.value = 'false';
      return;
    }
    try {
      const url = 'https://macspotbackend.azurewebsites.net/api/validate_contact';
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, meeting_type: meetingType })
      });
      const data = await response.json();
      console.log('📡 validate_contact status:', response.status);
      console.log('🔍 API-svar – söker contact_id:', data);

      // --- LOGGAR: Kontrollmötestyp och clt-fält ---
      console.log('📋 Kontrollmötestyp:', meetingType);
      console.log('📊 Kontroll clt-fält:', {
        cltEmail: cltEmail?.value,
        cltMeetingType: cltMeetingType?.value,
        cltMeetingLength: cltMeetingLength?.value,
        cltContactId: cltContactId?.value,
        cltReady: cltReady?.value
      });

      await fetchAndUpdateCustomerState(email, meetingType);
      updateCustomerFieldVisibilityAndState(data, meetingType);
    } catch (err) {
      console.error('❌ Fel vid validering av kontakt:', err);
    }
  }

  // Kontrollera att validateEmail() kopplas vid input
  document.addEventListener('DOMContentLoaded', () => {
    // Sätt clt_ready till 'false' vid sidladdning
    const cltReady = document.getElementById('clt_ready');
    if (cltReady) cltReady.value = 'false';

    const emailEl = document.querySelector('#booking_email');
    if (emailEl) {
      emailEl.addEventListener('input', validateEmail);
      console.log('✅ Lyssnare på #booking_email aktiverad');
    } else {
      console.warn('⚠️ #booking_email hittades inte vid DOMContentLoaded');
    }
    // Lägg till lyssnare på alla kontaktfält så att validateAndRenderCustomerFields() körs vid input
    [
      'first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country', 'clt_contact_id'
    ].forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.addEventListener('input', () => {
          validateAndRenderCustomerFields();
        });
      }
    });
    console.log('✅ Lyssnare på kontaktfält aktiverad');
    // Göm alltid kontaktknappen initialt vid sidladdning
    const submitButton = document.getElementById('contact-update-button');
    if (submitButton) {
      submitButton.style.display = 'none';
      submitButton.textContent = '';
      console.log('🚫 Gömmer kontaktknapp vid sidladdning och nollställer text');
    }

    // Lägg till click-lyssnare på #contact-update-button som POSTar till /validate_contact (write_if_valid)
    if (submitButton) {
      submitButton.addEventListener('click', async (e) => {
        // --- DEBUGLOGGAR: visar exakt vad som finns tillgängligt vid klicktillfället ---
        console.log('🧪 Knappklick mottaget.');
        console.log('🧪 Knappetikett:', submitButton.textContent);
        console.log('🧪 window.formState:', window.formState);
        // Lägg till loggning av varje relevant fält:
        ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'].forEach(id => {
          const el = document.getElementById(id);
          console.log(`🧪 ${id}:`, el?.value || '(tomt)');
        });
        console.log('🧪 clt_ready:', document.getElementById('clt_ready')?.value);
        // -------------------------------------------------------------------------------
        e.preventDefault();
        const label = submitButton.tagName === 'INPUT' ? submitButton.value : submitButton.textContent;
        if (!['Skapa', 'Uppdatera'].includes(label)) {
          console.warn('⚠️ Avbryter klick – ogiltig knappetikett:', label);
          return;
        }

        if (!window.formState) {
          const metadata = {};
          ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'].forEach(id => {
            const el = document.getElementById(id);
            metadata[id] = el?.value || '';
          });

          const emailEl = document.querySelector('#booking_email');
          const meetingTypeEl = document.querySelector('input[name="meeting_type"]:checked');
          const meetingLengthEl = document.querySelector('input[name="meeting_length"]:checked');
          const contactIdEl = document.getElementById('clt_contact_id');

          window.formState = {
            email: emailEl?.value.trim() || '',
            meeting_type: meetingTypeEl?.value || '',
            meeting_length: parseInt(meetingLengthEl?.value || '90', 10),
            contact_id: contactIdEl?.value || '',
            metadata
          };
          console.log('📥 Återskapade window.formState vid klick:', window.formState);
        }

        const body = {
          email: window.formState.email,
          meeting_type: window.formState.meeting_type,
          metadata: window.formState.metadata,
          write_if_valid: true
        };

        try {
          console.log('📤 Skickar kontaktdata till /validate_contact (write_if_valid)', body);
          const res = await fetch('https://macspotbackend.azurewebsites.net/api/validate_contact', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          });
          const result = await res.json();
          console.log('✅ Kontaktdata sparad via validate_contact:', result);
          // --- NY LOGIK: Sätt clt_contact_id och trigga slot-fetch om contact_id finns ---
          if (result.contact_id) {
            const cltContactId = document.getElementById('clt_contact_id');
            if (cltContactId) cltContactId.value = result.contact_id;

            if (window.formState) {
              window.formState.contact_id = result.contact_id;
            }

            const cltReady = document.getElementById('clt_ready');
            if (cltReady) cltReady.value = 'true';

            if (window.initAvailableSlotFetch) {
              window.initAvailableSlotFetch();
              console.log('📡 initAvailableSlotFetch() anropad från Skapa/Uppdatera');
            }
            // --- Lägg till validateAndRenderCustomerFields() efter skapande/uppdatering ---
            validateAndRenderCustomerFields();
            console.log('🔁 Kör validateAndRenderCustomerFields() efter skapande');
            // Dölj knappen efter lyckad uppdatering
            submitButton.style.display = 'none';
            submitButton.style.opacity = '0';
            submitButton.style.pointerEvents = 'none';
            submitButton.style.visibility = 'hidden';
            console.log('🚫 Gömmer kontaktknapp efter att kunden skapats');
          }
        } catch (err) {
          console.error('❌ Misslyckades spara kontaktdata:', err);
        }
      });
    }
  });

  // --- Nya funktioner för API-anrop och fälthantering ---
  async function fetchAndUpdateCustomerState(email, meetingType) {
    const cltEmail = document.getElementById('clt_email');
    const cltMeetingType = document.getElementById('clt_meetingtype');
    const cltMeetingLength = document.getElementById('clt_meetinglength');
    const cltContactId = document.getElementById('clt_contact_id');

    if (cltEmail) cltEmail.value = email;
    if (cltMeetingType) {
      cltMeetingType.value = meetingType;
      console.log('📥 Satt cltMeetingType från fetchAndUpdateCustomerState:', cltMeetingType.value);
    }

    const response = await fetch('https://macspotbackend.azurewebsites.net/api/validate_contact', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, meeting_type: meetingType })
    });
    const data = await response.json();

    const idFromResponse = [data.contact_id, data.id].find(v => typeof v === 'string' && v.length > 10) || '';
    if (cltContactId) cltContactId.value = idFromResponse;

    return data;
  }

  function updateCustomerFieldVisibilityAndState(data, meetingType) {
    const submitButton = document.getElementById('contact-update-button');
    // Dölj submit-knappen direkt efter den definierats
    if (submitButton) {
      submitButton.style.display = 'none';
      submitButton.style.opacity = '0';
      submitButton.style.pointerEvents = 'none';
      submitButton.style.visibility = 'hidden';
    }
    const cltEmail = document.getElementById('clt_email');
    const cltMeetingType = document.getElementById('clt_meetingtype');
    const cltMeetingLength = document.getElementById('clt_meetinglength');
    const cltContactId = document.getElementById('clt_contact_id');
    const cltReady = document.getElementById('clt_ready');
    const emailEl = document.querySelector('#booking_email');
    const meetingLengthEl = document.querySelector('input[name="meeting_length"]:checked');
    const meetingLength = meetingLengthEl ? meetingLengthEl.value : '';
    const addressField = document.querySelector('#address_fields');
    const allFieldIds = ['first_name', 'last_name', 'phone', 'company', 'address', 'postal_code', 'city', 'country'];
    const fieldLabels = {
      first_name: 'Förnamn',
      last_name: 'Efternamn',
      phone: 'Telefonnummer',
      company: 'Företag',
      address: 'Gatuadress',
      postal_code: 'Postnummer',
      city: 'Stad',
      country: 'Land'
    };
    const allFields = allFieldIds.map(id => document.getElementById(id)).filter(Boolean);
    const missingFieldsContainer = document.getElementById('missing_fields_messages');
    if (missingFieldsContainer) missingFieldsContainer.innerHTML = '';

    // Döljer alla kontaktfält och address_fields
    allFields.forEach(f => {
      f.classList.add('hidden');
      f.classList.remove('needs-filling');
      f.style.display = 'none';
    });
    if (addressField) addressField.style.display = 'none';

    // Visa alltid dessa fält om kunden är ny eller har missing_fields
    const alwaysShow = ['first_name', 'last_name', 'phone', 'company'];
    allFields.forEach(input => {
      const fieldName = input.id;
      const isAddressField = ['address', 'postal_code', 'city', 'country'].includes(fieldName);
      const shouldShow = data.status === 'new_customer' && alwaysShow.includes(fieldName);
      const isMissing = data.missing_fields && data.missing_fields.includes(fieldName);
      const showField = shouldShow || isMissing;
      if (showField) {
        input.classList.remove('hidden');
        input.classList.add('needs-filling');
        input.style.display = 'block';
        if (missingFieldsContainer && isMissing) {
          const p = document.createElement('p');
          p.className = 'missing-field-message';
          p.textContent = `Saknat fält: ${fieldLabels[fieldName] || fieldName}`;
          missingFieldsContainer.appendChild(p);
        }
      }
    });

    // Visa #address_fields om meetingType === 'atclient' och (ny kund eller någon adress i missing_fields)
    const addressFieldIds = ['address', 'postal_code', 'city', 'country'];
    const addressRequired =
      meetingType === 'atclient' &&
      (
        data.status === 'new_customer' ||
        (data.missing_fields && addressFieldIds.some(id => data.missing_fields.includes(id)))
      );
    if (addressRequired && addressField) {
      addressField.style.display = 'block';
      console.log('✅ Visar #address_fields pga atclient + ny kund eller missing_fields');
    }

    // Visa knapp baserat på status och om alla synliga fält är ifyllda
    if (submitButton) {
      if (data.status === 'new_customer') {
        submitButton.style.display = 'flex';
        submitButton.style.opacity = '1';
        submitButton.style.pointerEvents = 'auto';
        submitButton.style.visibility = 'visible';
        if (submitButton.tagName === 'INPUT') {
          submitButton.value = 'Skapa';
        } else {
          submitButton.textContent = 'Skapa';
        }
        console.log('🆕 Ny kund – visa "Skapa" knapp');
      } else if (data.status === 'existing_customer' && Array.isArray(data.missing_fields) && data.missing_fields.length > 0) {
        submitButton.style.display = 'flex';
        submitButton.style.opacity = '1';
        submitButton.style.pointerEvents = 'auto';
        submitButton.style.visibility = 'visible';
        if (submitButton.tagName === 'INPUT') {
          submitButton.value = 'Uppdatera';
        } else {
          submitButton.textContent = 'Uppdatera';
        }
        console.log('✏️ Befintlig kund med saknade fält – visa "Uppdatera" knapp');
      } else {
        // submitButton already hidden above
        console.log('✅ Befintlig kund komplett – göm knapp');
      }
    }

    // Kontrollera att alla dolda fält är ifyllda
    const allCltFieldsFilled =
      cltEmail && String(cltEmail.value).trim() &&
      cltMeetingType && String(cltMeetingType.value).trim() &&
      cltMeetingLength && String(cltMeetingLength.value).trim() &&
      cltContactId && typeof cltContactId.value === 'string' && cltContactId.value.trim();
    if (!allCltFieldsFilled) {
      // Specifik logg när cltContactId.value saknas
      if (!cltContactId || !cltContactId.value.trim()) {
        console.warn('⚠️ clt_ready = false p.g.a: cltContactId.value saknas', {
          cltEmail: cltEmail?.value,
          cltMeetingType: cltMeetingType?.value,
          cltMeetingLength: cltMeetingLength?.value,
          cltContactId: cltContactId?.value
        });
      } else {
        console.warn('⚠️ clt_ready = false p.g.a: clt-fält saknas – detaljer:', {
          cltEmail: cltEmail?.value,
          cltMeetingType: cltMeetingType?.value,
          cltMeetingLength: cltMeetingLength?.value,
          cltContactId: cltContactId?.value
        });
      }
    }
    console.log('🧪 Kontroll av clt-fält:',
      {
        cltEmail: cltEmail?.value,
        cltMeetingType: cltMeetingType?.value,
        cltMeetingLength: cltMeetingLength?.value,
        cltContactId: cltContactId?.value
      }
    );

    // Kontrollera att alla synliga kontaktfält är ifyllda
    // Använd getComputedStyle för att säkert avgöra synlighet
    const visibleInputs = allFields.filter(el => el && window.getComputedStyle(el).display !== 'none');
    const allVisibleContactFieldsFilled = visibleInputs.every(input => input.value.trim());
    visibleInputs.forEach(input => {
      console.log(`🔍 Synligt fält: #${input.id} = "${input.value.trim()}"`);
    });

    if (allCltFieldsFilled && allVisibleContactFieldsFilled) {
      if (cltReady) {
        cltReady.value = 'true';
        // Sätt window.formState så att det alltid finns vid knapptryckning
        window.formState = {
          email: emailEl ? emailEl.value.trim() : '',
          meeting_type: meetingType,
          meeting_length: parseInt(meetingLength, 10),
          contact_id: cltContactId?.value || '',
          metadata: {
            first_name: document.getElementById('first_name')?.value || '',
            last_name: document.getElementById('last_name')?.value || '',
            phone: document.getElementById('phone')?.value || '',
            company: document.getElementById('company')?.value || '',
            address: document.getElementById('address')?.value || '',
            postal_code: document.getElementById('postal_code')?.value || '',
            city: document.getElementById('city')?.value || '',
            country: document.getElementById('country')?.value || ''
          }
        };
        // Lägg till källa för formState
        window.formState.source = 'frontend';
        // Döljer submit-knappen direkt när clt_ready = true (skapande/uppdatering klar)
        if (submitButton) {
          submitButton.style.display = 'none';
          submitButton.style.opacity = '0';
          submitButton.style.pointerEvents = 'none';
          submitButton.style.visibility = 'hidden';
          console.log('🚫 Gömmer knapp efter skapande eller uppdatering');
        }
        console.log('✅ formState satt:', window.formState);
        console.log('✅ Alla kund- och kontaktfält ifyllda, satt #clt_ready = true');
        // KOPPLAR Block 1 till Block 2: initiera slot-fetch om funktionen finns
        if (window.initAvailableSlotFetch) {
          window.initAvailableSlotFetch();
          console.log('📡 initAvailableSlotFetch() anropad från Block 1');
        } else {
          console.warn('⚠️ initAvailableSlotFetch() saknas – se till att Block 2 är laddad');
          setTimeout(() => {
            if (window.initAvailableSlotFetch) {
              window.initAvailableSlotFetch();
              console.log('📡 initAvailableSlotFetch() kördes via fallback');
            } else {
              console.warn('❌ initAvailableSlotFetch() saknas fortfarande efter timeout');
            }
          }, 500);
        }
      }
    } else {
      const debugMissing = [];
      if (!allCltFieldsFilled) debugMissing.push('clt-fält saknas');
      if (!allVisibleContactFieldsFilled) debugMissing.push('synliga kontaktfält saknas');
      console.warn('⚠️ clt_ready = false p.g.a:', debugMissing.join(' + '));
      if (cltReady) {
        cltReady.value = 'false';
        console.log('⚠️ Saknas ifyllda kontaktfält, satt #clt_ready = false');
      }
    }

    // Lägg till logg för slutstatus för clt-fält
    console.log('🧪 Slutstatus clt-fält:', {
      clt_email: cltEmail?.value,
      clt_meetingtype: cltMeetingType?.value,
      clt_meetinglength: cltMeetingLength?.value,
      clt_contact_id: cltContactId?.value,
      clt_ready: cltReady?.value
    });
  }
</script>
END: Embed Block 1.js

====================
📄 Fil: frontend_webflow/Embed Block 2.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-21 20:36:22
📏 Antal rader: 103
🧩 Antal funktioner: 0
💬 Kommentarstäckning: 7 rader (6.8%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 0 rader
🧠 Komplexitetspoäng: 7
🧪 TODO/FIXME: 0
====================
START: Embed Block 2.js
<script>
window.CalendarModule = {
  renderCalendar: function(groupedSlots, firstDate) {
    // Calendar rendering logic
    console.log('Rendering calendar with slots:', groupedSlots, 'starting from:', firstDate);
    // Implementation details...
  },
  renderTimes: function(times) {
    // Times rendering logic
    console.log('Rendering times:', times);
    // Implementation details...
  },
  highlightDate: function(date) {
    // Highlight date logic
    console.log('Highlighting date:', date);
    // Implementation details...
  },
  initAvailableSlotFetch: function() {
    const cltReady = document.getElementById('clt_ready')?.value;
    if (cltReady !== 'true' || !window.formState) {
      console.warn('❌ Kan inte hämta tillgängliga tider – formState eller clt_ready saknas');
      return;
    }

    console.log('📡 Hämtar tillgängliga tider för:', window.formState);
    if (!window.formState.contact_id) {
      console.warn('⚠️ contact_id saknas i formState – fetch avbryts');
    }

    fetch('https://macspotbackend.azurewebsites.net/api/getavailableslots', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: window.formState.email,
        meeting_type: window.formState.meeting_type,
        meeting_length: window.formState.meeting_length,
        contact_id: window.formState.contact_id
      })
    })
    .then(res => res.json())
    .then(data => {
      console.log('🧪 Rått slotData från API:', data);
      if (!Array.isArray(data.slots)) {
        console.warn('⚠️ API svarar utan slot-array:', data);
      }
      if (Array.isArray(data.slots)) {
        const grouped = {};
        data.slots.forEach(slot => {
          const localDate = new Date(slot.slot_iso);
          const localYear = localDate.getFullYear();
          const localMonth = String(localDate.getMonth() + 1).padStart(2, '0');
          const localDay = String(localDate.getDate()).padStart(2, '0');
          const date = `${localYear}-${localMonth}-${localDay}`;
          if (!grouped[date]) grouped[date] = [];
          grouped[date].push({
            slot_iso: slot.slot_iso,
            slot_local: slot.slot_local || slot.slot_iso
          });
        });
        console.log('📦 Skickar grouped slots till renderCalendar:', grouped);
        if (typeof window.CalendarModule.renderCalendar === 'function') {
          const firstDateStr = Object.keys(grouped).sort()[0];
          const firstDate = new Date(firstDateStr);
          window.CalendarModule.renderCalendar(grouped, firstDate);
        }
      }
    })
    .catch(err => {
      console.error('❌ Fetch error in getavailableslots:', err.message || err);
      alert('Fel vid hämtning av tider. Kontrollera din internetanslutning eller att servern är tillgänglig.');
    });
  }
};

window.getISOWeek = function(date) {
  var target = new Date(date.valueOf());
  var dayNr = (date.getDay() + 6) % 7;
  target.setDate(target.getDate() - dayNr + 3);
  var firstThursday = target.valueOf();
  target.setMonth(0, 1);
  if (target.getDay() !== 4) {
    target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
  }
  return 1 + Math.ceil((firstThursday - target) / 604800000);
};

// Inserted CSS
const style = document.createElement('style');
style.innerHTML = `
  .calendar-wrapper {
    font-family: Arial, sans-serif;
  }
  .calendar-day {
    padding: 5px;
    cursor: pointer;
  }
  .calendar-day.highlighted {
    background-color: #007BFF;
    color: white;
  }
`;
document.head.appendChild(style);
</script>
END: Embed Block 2.js

====================
📄 Fil: frontend_webflow/Embed Block 3.js
📂 Kodtyp: 📄 Övrigt
🗂 Filtyp: 🟨 JavaScript
📅 Senast ändrad: 2025-05-16 09:15:38
📏 Antal rader: 93
🧩 Antal funktioner: 3
💬 Kommentarstäckning: 0 rader (0.0%)
📥 Imports: 0 – Inga
🔍 Längsta funktion: 5 rader
🧠 Komplexitetspoäng: 10
🧪 TODO/FIXME: 0
====================
START: Embed Block 3.js
<script>
  async function submitBooking(data) {
    if (!data.contact_id || !data.slot_iso || !data.meeting_type || !data.meeting_length) {
      return;
    }

    const startTime = new Date(data.slot_iso);
    const endTime = new Date(startTime.getTime() + data.meeting_length * 60000);

    const payload = {
      contact_id: data.contact_id,
      meeting_type: data.meeting_type,
      meeting_length: data.meeting_length,
      start_time: startTime.toISOString(),
      end_time: endTime.toISOString(),
      slot_iso: data.slot_iso
    };

    try {
      const response = await fetch('https://macspotbackend.azurewebsites.net/api/bookings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        alert('Bokningen misslyckades: ' + (errorData?.error || 'okänt fel'));
        return;
      }

      alert('Tack! Din bokning är genomförd.');
    } catch (error) {
      alert('Fel vid bokning, försök igen senare.');
    }
  }
  if (typeof window.submitBooking !== 'function') {
    window.submitBooking = submitBooking;
  }

  function initBookingButtonListener() {
    const btn = document.getElementById('submit-booking-button');
    if (!btn) return;

    btn.addEventListener('click', (e) => {
      e.preventDefault();

      const cltReadyEl = document.getElementById('clt_ready');
      const cltContactIdEl = document.getElementById('clt_contact_id');
      const cltMeetingTypeEl = document.getElementById('clt_meetingtype');
      const cltMeetingLengthEl = document.getElementById('clt_meetinglength');
      const cltSlotIsoEl = document.getElementById('clt_meetingtime');

      const cltContactId = cltContactIdEl?.value.trim();
      const cltMeetingType = cltMeetingTypeEl?.value.trim();
      const cltMeetingLength = parseInt(cltMeetingLengthEl?.value, 10);
      const cltSlotIso = cltSlotIsoEl?.value.trim();
      const cltReady = cltReadyEl?.value.trim();

      if (!cltContactId || !cltMeetingType || isNaN(cltMeetingLength) || !cltSlotIso || cltReady !== 'true') {
        return;
      }

      const bookingPayload = {
        contact_id: cltContactId,
        meeting_type: cltMeetingType,
        meeting_length: cltMeetingLength,
        slot_iso: cltSlotIso
      };

      submitBooking(bookingPayload);
    });
  }
  if (typeof window.initBookingButtonListener !== 'function') {
    window.initBookingButtonListener = initBookingButtonListener;
  }

  window.addEventListener('DOMContentLoaded', () => {
    try {
      if (document.getElementById('calendar_grid')) {
        initBookingButtonListener();
      } else {
        const interval = setInterval(() => {
          if (document.getElementById('calendar_grid')) {
            clearInterval(interval);
            initBookingButtonListener();
          }
        }, 100);
      }
    } catch (err) {
    }
  });
</script>
END: Embed Block 3.js

📁 KONFIGURATIONSFILER (function.json / host.json / package.json / .funcignore)
====================================

📄 .funcignore
   # Exclude dev-only files and folders
   .git
   .vscode
   .env
   *.log
   test/
   tests/
   
   # Explicitly include all required files and folders
   !host.json
   !package.json
   !package-lock.json
   
   !node_modules/
   !node_modules/**
   
   !shared/
   !shared/**
   
   !bookings/
   !bookings/**
   !getavailableslots/
   !getavailableslots/**
   !validate_contact/
   !validate_contact/**
   !meeting_types/
   !meeting_types/**
   !refreshCalendarOrigins/
   !refreshCalendarOrigins/**
   !refreshTravelTimes/
   !refreshTravelTimes/**
📄 bookings/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "bookings"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 getavailableslots/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post", "options"],
         "route": "getavailableslots"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 host.json
   {
     "version": "2.0",
     "extensionBundle": {
       "id": "Microsoft.Azure.Functions.ExtensionBundle",
       "version": "[4.*, 5.0.0)"
     },
     "extensions": {
       "http": {
         "cors": {
           "allowedOrigins": [
             "https://www.klrab.se"
           ],
           "supportCredentials": false
         }
       }
     }
   }
📄 meeting_types/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": [ "get" ],
         "route": "meeting_types"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📄 package.json
   {
     "name": "macspot-api",
     "version": "1.0.0",
     "description": "Azure Functions backend för MacSpot CRM/ERP",
     "scripts": {
       "start": "func start",
       "dev": "func start --verbose",
       "deploy": "func azure functionapp publish macspotbackend",
       "build": "echo 'Nothing to build'"
     },
     "dependencies": {
       "@azure/functions": "^4.7.0",
       "@azure/msal-node": "^3.5.1",
       "@microsoft/microsoft-graph-client": "^3.0.0",
       "dav": "^1.8.0",
       "dotenv": "^16.5.0",
       "isomorphic-fetch": "^3.0.0",
       "jsonwebtoken": "^9.0.0",
       "luxon": "^3.4.4",
       "node-fetch": "^2.7.0",
       "node-ical": "^0.20.1",
       "p-limit": "^6.2.0",
       "pg": "^8.15.6",
       "uuid": "^9.0.0",
       "xml2js": "^0.6.2"
     }
   }

📄 refreshCalendarOrigins/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 refreshTravelTimes/function.json
   {
     "bindings": [
       {
         "name": "myTimer",
         "type": "timerTrigger",
         "direction": "in",
         "schedule": "0 0 * * * *"
       }
     ],
     "scriptFile": "index.js"
   }
📄 validate_contact/function.json
   {
     "bindings": [
       {
         "authLevel": "anonymous",
         "type": "httpTrigger",
         "direction": "in",
         "name": "req",
         "methods": ["post"],
         "route": "validate_contact"
       },
       {
         "type": "http",
         "direction": "out",
         "name": "res"
       }
     ],
     "scriptFile": "index.js"
   }
📈 SUMMERING AV ALLA JS-FILER
====================================
📏 Totalt antal rader kod: 834
🧩 Totalt antal funktioner: 17
🧠 Total komplexitetspoäng: 80
🧪 Antal TODO/FIXME totalt: 0

📊 Per fil:
fil,rader,funktioner,komplexitet,kommentarer,imports
Embed Block 1.js,638,14,63,38,0
Embed Block 2.js,103,0,7,7,0
Embed Block 3.js,93,3,10,0,0
